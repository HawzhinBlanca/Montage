[project]
name = "montage"
version = "1.0.0"
description = "Professional video processing pipeline with highlight extraction"
requires-python = ">=3.8"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
# Comprehensive pytest options
addopts = """
    -v
    --strict-markers
    --strict-config
    --tb=short
    --cov=src
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --maxfail=1
    --durations=10
    --color=yes
    -p no:warnings
"""
# Custom markers for test organization
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (may use real services)",
    "e2e: End-to-end tests (full pipeline)",
    "slow: Tests that take > 5 seconds",
    "memory_intensive: Tests requiring significant memory",
    "requires_gpu: Tests requiring GPU acceleration",
    "requires_api_keys: Tests requiring real API keys",
    "stress: Stress/performance tests",
    "flaky: Tests known to be flaky (retry enabled)",
]
# Test discovery patterns
norecursedirs = [".git", "*.egg", "dist", "build", "__pycache__", "backup_*", "examples"]
# Timeout for tests (seconds)
timeout = 300
timeout_method = "thread"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/examples/*",
    "*/backup_*/*"
]
branch = true
data_file = ".coverage"
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.eggs
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | backup_*
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "backup_*",
    ".venv",
]

[tool.pytest-timeout]
timeout = 300
timeout_method = "thread"
timeout_func_only = false