{
  "summary": {
    "total_functions": 616,
    "dead_functions": 444,
    "mock_functions": 2,
    "placeholder_functions": 0,
    "complex_functions": 27,
    "no_type_hints": 271,
    "broad_exceptions": 128
  },
  "functions": {
    "deep_function_audit.py:FunctionAnalyzer.__init__": {
      "module": "deep_function_audit.py",
      "name": "__init__",
      "full_name": "FunctionAnalyzer.__init__",
      "lineno": 56,
      "end_lineno": 60,
      "loc": 5,
      "complexity": 1,
      "args": [
        "self",
        "module_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FunctionAnalyzer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:FunctionAnalyzer.visit_Import": {
      "module": "deep_function_audit.py",
      "name": "visit_Import",
      "full_name": "FunctionAnalyzer.visit_Import",
      "lineno": 62,
      "end_lineno": 65,
      "loc": 4,
      "complexity": 2,
      "args": [
        "self",
        "node"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FunctionAnalyzer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:FunctionAnalyzer.visit_ImportFrom": {
      "module": "deep_function_audit.py",
      "name": "visit_ImportFrom",
      "full_name": "FunctionAnalyzer.visit_ImportFrom",
      "lineno": 67,
      "end_lineno": 70,
      "loc": 4,
      "complexity": 2,
      "args": [
        "self",
        "node"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FunctionAnalyzer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:FunctionAnalyzer.visit_ClassDef": {
      "module": "deep_function_audit.py",
      "name": "visit_ClassDef",
      "full_name": "FunctionAnalyzer.visit_ClassDef",
      "lineno": 72,
      "end_lineno": 76,
      "loc": 5,
      "complexity": 1,
      "args": [
        "self",
        "node"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FunctionAnalyzer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:FunctionAnalyzer.visit_FunctionDef": {
      "module": "deep_function_audit.py",
      "name": "visit_FunctionDef",
      "full_name": "FunctionAnalyzer.visit_FunctionDef",
      "lineno": 78,
      "end_lineno": 79,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "node"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FunctionAnalyzer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:FunctionAnalyzer.visit_AsyncFunctionDef": {
      "module": "deep_function_audit.py",
      "name": "visit_AsyncFunctionDef",
      "full_name": "FunctionAnalyzer.visit_AsyncFunctionDef",
      "lineno": 81,
      "end_lineno": 82,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "node"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FunctionAnalyzer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:FunctionAnalyzer._analyze_function": {
      "module": "deep_function_audit.py",
      "name": "_analyze_function",
      "full_name": "FunctionAnalyzer._analyze_function",
      "lineno": 84,
      "end_lineno": 157,
      "loc": 74,
      "complexity": 15,
      "args": [
        "self",
        "node",
        "is_async"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FunctionAnalyzer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:FunctionAnalyzer._catches_broad_exception": {
      "module": "deep_function_audit.py",
      "name": "_catches_broad_exception",
      "full_name": "FunctionAnalyzer._catches_broad_exception",
      "lineno": 159,
      "end_lineno": 167,
      "loc": 9,
      "complexity": 6,
      "args": [
        "self",
        "node"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FunctionAnalyzer",
      "docstring": "Check if function catches Exception or bare except",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:FunctionAnalyzer._detect_external_deps": {
      "module": "deep_function_audit.py",
      "name": "_detect_external_deps",
      "full_name": "FunctionAnalyzer._detect_external_deps",
      "lineno": 169,
      "end_lineno": 188,
      "loc": 20,
      "complexity": 5,
      "args": [
        "self",
        "node"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FunctionAnalyzer",
      "docstring": "Detect external dependencies (HTTP, GPU, DB, etc.)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai",
        "file",
        "gpu",
        "db",
        "subprocess",
        "http"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:FunctionAnalyzer._is_placeholder": {
      "module": "deep_function_audit.py",
      "name": "_is_placeholder",
      "full_name": "FunctionAnalyzer._is_placeholder",
      "lineno": 190,
      "end_lineno": 204,
      "loc": 15,
      "complexity": 12,
      "args": [
        "self",
        "node"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FunctionAnalyzer",
      "docstring": "Check if function is a placeholder/stub",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:DeepFunctionAuditor.__init__": {
      "module": "deep_function_audit.py",
      "name": "__init__",
      "full_name": "DeepFunctionAuditor.__init__",
      "lineno": 210,
      "end_lineno": 215,
      "loc": 6,
      "complexity": 1,
      "args": [
        "self",
        "project_root"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DeepFunctionAuditor",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:DeepFunctionAuditor.run_audit": {
      "module": "deep_function_audit.py",
      "name": "run_audit",
      "full_name": "DeepFunctionAuditor.run_audit",
      "lineno": 217,
      "end_lineno": 241,
      "loc": 25,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DeepFunctionAuditor",
      "docstring": "Run the complete audit",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:DeepFunctionAuditor._static_scan": {
      "module": "deep_function_audit.py",
      "name": "_static_scan",
      "full_name": "DeepFunctionAuditor._static_scan",
      "lineno": 243,
      "end_lineno": 264,
      "loc": 22,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DeepFunctionAuditor",
      "docstring": "Scan all Python files and extract function info",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:DeepFunctionAuditor._build_call_graph": {
      "module": "deep_function_audit.py",
      "name": "_build_call_graph",
      "full_name": "DeepFunctionAuditor._build_call_graph",
      "lineno": 266,
      "end_lineno": 275,
      "loc": 10,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DeepFunctionAuditor",
      "docstring": "Build function call graph (simplified)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:DeepFunctionAuditor._runtime_verification": {
      "module": "deep_function_audit.py",
      "name": "_runtime_verification",
      "full_name": "DeepFunctionAuditor._runtime_verification",
      "lineno": 277,
      "end_lineno": 341,
      "loc": 65,
      "complexity": 7,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DeepFunctionAuditor",
      "docstring": "Run tests with coverage and sample pipeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:DeepFunctionAuditor._process_coverage_data": {
      "module": "deep_function_audit.py",
      "name": "_process_coverage_data",
      "full_name": "DeepFunctionAuditor._process_coverage_data",
      "lineno": 343,
      "end_lineno": 363,
      "loc": 21,
      "complexity": 8,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DeepFunctionAuditor",
      "docstring": "Process coverage data and mark covered functions",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:DeepFunctionAuditor._process_profile_data": {
      "module": "deep_function_audit.py",
      "name": "_process_profile_data",
      "full_name": "DeepFunctionAuditor._process_profile_data",
      "lineno": 365,
      "end_lineno": 376,
      "loc": 12,
      "complexity": 5,
      "args": [
        "self",
        "profile_file"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DeepFunctionAuditor",
      "docstring": "Process py-spy profile data",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:DeepFunctionAuditor._complexity_analysis": {
      "module": "deep_function_audit.py",
      "name": "_complexity_analysis",
      "full_name": "DeepFunctionAuditor._complexity_analysis",
      "lineno": 378,
      "end_lineno": 380,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DeepFunctionAuditor",
      "docstring": "Additional complexity analysis already done in static scan",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "deep_function_audit.py:DeepFunctionAuditor._generate_report": {
      "module": "deep_function_audit.py",
      "name": "_generate_report",
      "full_name": "DeepFunctionAuditor._generate_report",
      "lineno": 382,
      "end_lineno": 519,
      "loc": 138,
      "complexity": 43,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DeepFunctionAuditor",
      "docstring": "Generate the audit report",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "run_montage.py:main": {
      "module": "run_montage.py",
      "name": "main",
      "full_name": "main",
      "lineno": 23,
      "end_lineno": 114,
      "loc": 92,
      "complexity": 9,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Main entry point for Montage pipeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "main.py:VideoProcessingPipeline.__init__": {
      "module": "main.py",
      "name": "__init__",
      "full_name": "VideoProcessingPipeline.__init__",
      "lineno": 33,
      "end_lineno": 38,
      "loc": 6,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingPipeline",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "main.py:VideoProcessingPipeline.start_monitoring": {
      "module": "main.py",
      "name": "start_monitoring",
      "full_name": "VideoProcessingPipeline.start_monitoring",
      "lineno": 40,
      "end_lineno": 44,
      "loc": 5,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingPipeline",
      "docstring": "Start monitoring servers",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "main.py:VideoProcessingPipeline.create_job": {
      "module": "main.py",
      "name": "create_job",
      "full_name": "VideoProcessingPipeline.create_job",
      "lineno": 46,
      "end_lineno": 74,
      "loc": 29,
      "complexity": 4,
      "args": [
        "self",
        "input_path",
        "output_path",
        "edit_plan",
        "options"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingPipeline",
      "docstring": "Create a new processing job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "main.py:VideoProcessingPipeline.process_job": {
      "module": "main.py",
      "name": "process_job",
      "full_name": "VideoProcessingPipeline.process_job",
      "lineno": 76,
      "end_lineno": 121,
      "loc": 46,
      "complexity": 5,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingPipeline",
      "docstring": "Process a single job with all stages",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "main.py:VideoProcessingPipeline._execute_stages": {
      "module": "main.py",
      "name": "_execute_stages",
      "full_name": "VideoProcessingPipeline._execute_stages",
      "lineno": 123,
      "end_lineno": 244,
      "loc": 122,
      "complexity": 16,
      "args": [
        "self",
        "job_id",
        "job",
        "start_stage"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingPipeline",
      "docstring": "Execute pipeline stages",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "main.py:VideoProcessingPipeline._highlights_to_edit_plan": {
      "module": "main.py",
      "name": "_highlights_to_edit_plan",
      "full_name": "VideoProcessingPipeline._highlights_to_edit_plan",
      "lineno": 246,
      "end_lineno": 267,
      "loc": 22,
      "complexity": 5,
      "args": [
        "self",
        "highlights"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingPipeline",
      "docstring": "Convert highlights to edit plan",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "main.py:VideoProcessingPipeline._fail_job": {
      "module": "main.py",
      "name": "_fail_job",
      "full_name": "VideoProcessingPipeline._fail_job",
      "lineno": 269,
      "end_lineno": 279,
      "loc": 11,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "error_message"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingPipeline",
      "docstring": "Mark job as failed",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "main.py:VideoProcessingPipeline.get_job_status": {
      "module": "main.py",
      "name": "get_job_status",
      "full_name": "VideoProcessingPipeline.get_job_status",
      "lineno": 281,
      "end_lineno": 299,
      "loc": 19,
      "complexity": 4,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingPipeline",
      "docstring": "Get current job status",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "main.py:main": {
      "module": "main.py",
      "name": "main",
      "full_name": "main",
      "lineno": 302,
      "end_lineno": 364,
      "loc": 63,
      "complexity": 6,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Main entry point",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ColorSpaceInfo.from_ffprobe": {
      "module": "color_converter.py",
      "name": "from_ffprobe",
      "full_name": "ColorSpaceInfo.from_ffprobe",
      "lineno": 30,
      "end_lineno": 53,
      "loc": 24,
      "complexity": 3,
      "args": [
        "cls",
        "stream_data"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_method": true,
      "class_name": "ColorSpaceInfo",
      "docstring": "Create from FFprobe stream data",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ColorSpaceConverter.__init__": {
      "module": "color_converter.py",
      "name": "__init__",
      "full_name": "ColorSpaceConverter.__init__",
      "lineno": 59,
      "end_lineno": 61,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ColorSpaceConverter",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ColorSpaceConverter.analyze_color_space": {
      "module": "color_converter.py",
      "name": "analyze_color_space",
      "full_name": "ColorSpaceConverter.analyze_color_space",
      "lineno": 63,
      "end_lineno": 102,
      "loc": 40,
      "complexity": 4,
      "args": [
        "self",
        "input_file"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ColorSpaceConverter",
      "docstring": "Analyze video color space information",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ColorSpaceConverter.validate_sdr_input": {
      "module": "color_converter.py",
      "name": "validate_sdr_input",
      "full_name": "ColorSpaceConverter.validate_sdr_input",
      "lineno": 104,
      "end_lineno": 120,
      "loc": 17,
      "complexity": 3,
      "args": [
        "self",
        "input_file"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ColorSpaceConverter",
      "docstring": "Validate that input is SDR (not HDR).\n\nReturns:\n    (is_valid, error_message)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ColorSpaceConverter.build_color_conversion_filter": {
      "module": "color_converter.py",
      "name": "build_color_conversion_filter",
      "full_name": "ColorSpaceConverter.build_color_conversion_filter",
      "lineno": 122,
      "end_lineno": 143,
      "loc": 22,
      "complexity": 1,
      "args": [
        "self",
        "source_color_info"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ColorSpaceConverter",
      "docstring": "Build zscale filter for BT.709 conversion.\n\nThis ensures all output is correctly flagged as BT.709.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ColorSpaceConverter.convert_to_bt709": {
      "module": "color_converter.py",
      "name": "convert_to_bt709",
      "full_name": "ColorSpaceConverter.convert_to_bt709",
      "lineno": 146,
      "end_lineno": 221,
      "loc": 76,
      "complexity": 5,
      "args": [
        "self",
        "input_file",
        "output_file",
        "video_codec",
        "audio_codec",
        "additional_filters"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ColorSpaceConverter",
      "docstring": "Convert video to BT.709 color space.\n\nArgs:\n    input_file: Input video path\n    output_file: Output video path\n    video_codec: Video codec for encoding\n    audio_codec: Audio codec (default: copy)\n    additional_filters: Additional video filters to apply\n    \nReturns:\n    Conversion results and verification",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ColorSpaceConverter.get_encoding_color_params": {
      "module": "color_converter.py",
      "name": "get_encoding_color_params",
      "full_name": "ColorSpaceConverter.get_encoding_color_params",
      "lineno": 223,
      "end_lineno": 234,
      "loc": 12,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ColorSpaceConverter",
      "docstring": "Get FFmpeg parameters to ensure BT.709 output.\n\nReturns dict of parameter: value for FFmpeg command.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ColorSpaceConverter.build_safe_encoding_command": {
      "module": "color_converter.py",
      "name": "build_safe_encoding_command",
      "full_name": "ColorSpaceConverter.build_safe_encoding_command",
      "lineno": 236,
      "end_lineno": 278,
      "loc": 43,
      "complexity": 3,
      "args": [
        "self",
        "input_file",
        "output_file",
        "video_filters",
        "video_codec",
        "audio_codec"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ColorSpaceConverter",
      "docstring": "Build FFmpeg command with proper color space handling.\n\nThis ensures output is always BT.709 regardless of input.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ensure_bt709_output": {
      "module": "color_converter.py",
      "name": "ensure_bt709_output",
      "full_name": "ensure_bt709_output",
      "lineno": 283,
      "end_lineno": 302,
      "loc": 20,
      "complexity": 2,
      "args": [
        "input_file",
        "output_file",
        "preserve_filters"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Ensure video output is BT.709 color space.\n\nThis is a convenience function for pipeline integration.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:get_safe_color_filter": {
      "module": "color_converter.py",
      "name": "get_safe_color_filter",
      "full_name": "get_safe_color_filter",
      "lineno": 305,
      "end_lineno": 308,
      "loc": 4,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get the color conversion filter string for manual integration",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ColorSafeVideoEditor.__init__": {
      "module": "color_converter.py",
      "name": "__init__",
      "full_name": "ColorSafeVideoEditor.__init__",
      "lineno": 315,
      "end_lineno": 316,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ColorSafeVideoEditor",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "color_converter.py:ColorSafeVideoEditor.edit_with_color_safety": {
      "module": "color_converter.py",
      "name": "edit_with_color_safety",
      "full_name": "ColorSafeVideoEditor.edit_with_color_safety",
      "lineno": 318,
      "end_lineno": 343,
      "loc": 26,
      "complexity": 2,
      "args": [
        "self",
        "input_file",
        "output_file",
        "edit_filters"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ColorSafeVideoEditor",
      "docstring": "Edit video ensuring BT.709 output",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "migrate.py:MigrationRunner.__init__": {
      "module": "migrate.py",
      "name": "__init__",
      "full_name": "MigrationRunner.__init__",
      "lineno": 17,
      "end_lineno": 18,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MigrationRunner",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "migrate.py:MigrationRunner.create_database_if_not_exists": {
      "module": "migrate.py",
      "name": "create_database_if_not_exists",
      "full_name": "MigrationRunner.create_database_if_not_exists",
      "lineno": 20,
      "end_lineno": 52,
      "loc": 33,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MigrationRunner",
      "docstring": "Create the database if it doesn't exist",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "migrate.py:MigrationRunner.create_migrations_table": {
      "module": "migrate.py",
      "name": "create_migrations_table",
      "full_name": "MigrationRunner.create_migrations_table",
      "lineno": 54,
      "end_lineno": 65,
      "loc": 12,
      "complexity": 1,
      "args": [
        "self",
        "conn"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MigrationRunner",
      "docstring": "Create migrations tracking table",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "migrate.py:MigrationRunner.get_applied_migrations": {
      "module": "migrate.py",
      "name": "get_applied_migrations",
      "full_name": "MigrationRunner.get_applied_migrations",
      "lineno": 67,
      "end_lineno": 73,
      "loc": 7,
      "complexity": 2,
      "args": [
        "self",
        "conn"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MigrationRunner",
      "docstring": "Get list of already applied migrations",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "migrate.py:MigrationRunner.apply_migration": {
      "module": "migrate.py",
      "name": "apply_migration",
      "full_name": "MigrationRunner.apply_migration",
      "lineno": 75,
      "end_lineno": 98,
      "loc": 24,
      "complexity": 2,
      "args": [
        "self",
        "conn",
        "migration_file"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MigrationRunner",
      "docstring": "Apply a single migration file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "migrate.py:MigrationRunner.run": {
      "module": "migrate.py",
      "name": "run",
      "full_name": "MigrationRunner.run",
      "lineno": 100,
      "end_lineno": 148,
      "loc": 49,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MigrationRunner",
      "docstring": "Run all pending migrations",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "db",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "legacy_config.py:Config.get_database_url": {
      "module": "legacy_config.py",
      "name": "get_database_url",
      "full_name": "Config.get_database_url",
      "lineno": 63,
      "end_lineno": 64,
      "loc": 2,
      "complexity": 1,
      "args": [
        "cls"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_method": true,
      "class_name": "Config",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "legacy_config.py:Config.validate": {
      "module": "legacy_config.py",
      "name": "validate",
      "full_name": "Config.validate",
      "lineno": 67,
      "end_lineno": 83,
      "loc": 17,
      "complexity": 5,
      "args": [
        "cls"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_method": true,
      "class_name": "Config",
      "docstring": "Validate required configuration",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/conftest.py:env_defaults": {
      "module": "tests/conftest.py",
      "name": "env_defaults",
      "full_name": "env_defaults",
      "lineno": 13,
      "end_lineno": 21,
      "loc": 9,
      "complexity": 1,
      "args": [
        "monkeypatch"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Set default environment variables for all tests.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/conftest.py:temp_dir": {
      "module": "tests/conftest.py",
      "name": "temp_dir",
      "full_name": "temp_dir",
      "lineno": 25,
      "end_lineno": 28,
      "loc": 4,
      "complexity": 1,
      "args": [],
      "decorators": [
        "fixture"
      ],
      "is_method": false,
      "class_name": null,
      "docstring": "Provide a temporary directory for test files.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/conftest.py:mock_api_keys": {
      "module": "tests/conftest.py",
      "name": "mock_api_keys",
      "full_name": "mock_api_keys",
      "lineno": 32,
      "end_lineno": 37,
      "loc": 6,
      "complexity": 1,
      "args": [
        "monkeypatch"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": false,
      "class_name": null,
      "docstring": "Mock API keys for testing.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": true,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/conftest.py:sample_video_path": {
      "module": "tests/conftest.py",
      "name": "sample_video_path",
      "full_name": "sample_video_path",
      "lineno": 41,
      "end_lineno": 52,
      "loc": 12,
      "complexity": 3,
      "args": [],
      "decorators": [
        "fixture"
      ],
      "is_method": false,
      "class_name": null,
      "docstring": "Path to test video file.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsManager.test_singleton_instance": {
      "module": "tests/test_metrics.py",
      "name": "test_singleton_instance",
      "full_name": "TestMetricsManager.test_singleton_instance",
      "lineno": 22,
      "end_lineno": 27,
      "loc": 6,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsManager",
      "docstring": "Test metrics manager is a singleton",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsManager.test_increment_job": {
      "module": "tests/test_metrics.py",
      "name": "test_increment_job",
      "full_name": "TestMetricsManager.test_increment_job",
      "lineno": 29,
      "end_lineno": 44,
      "loc": 16,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsManager",
      "docstring": "Test job counter increments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsManager.test_track_cost": {
      "module": "tests/test_metrics.py",
      "name": "test_track_cost",
      "full_name": "TestMetricsManager.test_track_cost",
      "lineno": 46,
      "end_lineno": 62,
      "loc": 17,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsManager",
      "docstring": "Test cost tracking",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsManager.test_track_processing_time": {
      "module": "tests/test_metrics.py",
      "name": "test_track_processing_time",
      "full_name": "TestMetricsManager.test_track_processing_time",
      "lineno": 64,
      "end_lineno": 78,
      "loc": 15,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsManager",
      "docstring": "Test processing time tracking",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsManager.test_track_job_progress": {
      "module": "tests/test_metrics.py",
      "name": "test_track_job_progress",
      "full_name": "TestMetricsManager.test_track_job_progress",
      "lineno": 80,
      "end_lineno": 93,
      "loc": 14,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsManager",
      "docstring": "Test job progress tracking",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsManager.test_track_error": {
      "module": "tests/test_metrics.py",
      "name": "test_track_error",
      "full_name": "TestMetricsManager.test_track_error",
      "lineno": 95,
      "end_lineno": 111,
      "loc": 17,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsManager",
      "docstring": "Test error tracking",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsManager.test_budget_tracking": {
      "module": "tests/test_metrics.py",
      "name": "test_budget_tracking",
      "full_name": "TestMetricsManager.test_budget_tracking",
      "lineno": 113,
      "end_lineno": 124,
      "loc": 12,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsManager",
      "docstring": "Test budget tracking",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsManager.test_audio_metrics": {
      "module": "tests/test_metrics.py",
      "name": "test_audio_metrics",
      "full_name": "TestMetricsManager.test_audio_metrics",
      "lineno": 126,
      "end_lineno": 140,
      "loc": 15,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsManager",
      "docstring": "Test audio quality metrics",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsManager.test_segment_metrics": {
      "module": "tests/test_metrics.py",
      "name": "test_segment_metrics",
      "full_name": "TestMetricsManager.test_segment_metrics",
      "lineno": 142,
      "end_lineno": 156,
      "loc": 15,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsManager",
      "docstring": "Test segment detection metrics",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsManager.test_system_metrics": {
      "module": "tests/test_metrics.py",
      "name": "test_system_metrics",
      "full_name": "TestMetricsManager.test_system_metrics",
      "lineno": 158,
      "end_lineno": 176,
      "loc": 19,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsManager",
      "docstring": "Test system resource metrics",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestDecorators.test_track_processing_stage_decorator": {
      "module": "tests/test_metrics.py",
      "name": "test_track_processing_stage_decorator",
      "full_name": "TestDecorators.test_track_processing_stage_decorator",
      "lineno": 182,
      "end_lineno": 199,
      "loc": 18,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDecorators",
      "docstring": "Test processing stage tracking decorator",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestDecorators.test_track_processing_stage_with_error": {
      "module": "tests/test_metrics.py",
      "name": "test_track_processing_stage_with_error",
      "full_name": "TestDecorators.test_track_processing_stage_with_error",
      "lineno": 201,
      "end_lineno": 216,
      "loc": 16,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDecorators",
      "docstring": "Test processing stage tracking with error",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestDecorators.test_track_api_cost_decorator": {
      "module": "tests/test_metrics.py",
      "name": "test_track_api_cost_decorator",
      "full_name": "TestDecorators.test_track_api_cost_decorator",
      "lineno": 218,
      "end_lineno": 239,
      "loc": 22,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDecorators",
      "docstring": "Test API cost tracking decorator",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestDecorators.test_track_api_cost_with_rate_limit": {
      "module": "tests/test_metrics.py",
      "name": "test_track_api_cost_with_rate_limit",
      "full_name": "TestDecorators.test_track_api_cost_with_rate_limit",
      "lineno": 241,
      "end_lineno": 256,
      "loc": 16,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDecorators",
      "docstring": "Test API cost tracking with rate limit error",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestDecorators.test_with_job_tracking_decorator": {
      "module": "tests/test_metrics.py",
      "name": "test_with_job_tracking_decorator",
      "full_name": "TestDecorators.test_with_job_tracking_decorator",
      "lineno": 258,
      "end_lineno": 278,
      "loc": 21,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDecorators",
      "docstring": "Test job tracking decorator",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestDecorators.test_with_job_tracking_failure": {
      "module": "tests/test_metrics.py",
      "name": "test_with_job_tracking_failure",
      "full_name": "TestDecorators.test_with_job_tracking_failure",
      "lineno": 280,
      "end_lineno": 296,
      "loc": 17,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDecorators",
      "docstring": "Test job tracking with failure",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsIntegration.test_concurrent_metric_updates": {
      "module": "tests/test_metrics.py",
      "name": "test_concurrent_metric_updates",
      "full_name": "TestMetricsIntegration.test_concurrent_metric_updates",
      "lineno": 302,
      "end_lineno": 328,
      "loc": 27,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsIntegration",
      "docstring": "Test thread-safe metric updates",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsIntegration.test_start_http_server": {
      "module": "tests/test_metrics.py",
      "name": "test_start_http_server",
      "full_name": "TestMetricsIntegration.test_start_http_server",
      "lineno": 331,
      "end_lineno": 345,
      "loc": 15,
      "complexity": 3,
      "args": [
        "self",
        "mock_start_server"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsIntegration",
      "docstring": "Test HTTP server startup",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsIntegration.test_update_system_metrics": {
      "module": "tests/test_metrics.py",
      "name": "test_update_system_metrics",
      "full_name": "TestMetricsIntegration.test_update_system_metrics",
      "lineno": 347,
      "end_lineno": 362,
      "loc": 16,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsIntegration",
      "docstring": "Test system metrics update helper",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_metrics.py:TestMetricsExample.test_example_usage": {
      "module": "tests/test_metrics.py",
      "name": "test_example_usage",
      "full_name": "TestMetricsExample.test_example_usage",
      "lineno": 368,
      "end_lineno": 401,
      "loc": 34,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestMetricsExample",
      "docstring": "Test example metrics integration",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_vertical.py:test_vertical": {
      "module": "tests/test_vertical.py",
      "name": "test_vertical",
      "full_name": "test_vertical",
      "lineno": 5,
      "end_lineno": 26,
      "loc": 22,
      "complexity": 4,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceInfo.test_from_ffprobe_sdr": {
      "module": "tests/test_color_converter.py",
      "name": "test_from_ffprobe_sdr",
      "full_name": "TestColorSpaceInfo.test_from_ffprobe_sdr",
      "lineno": 18,
      "end_lineno": 33,
      "loc": 16,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceInfo",
      "docstring": "Test creating from SDR stream data",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceInfo.test_from_ffprobe_hdr": {
      "module": "tests/test_color_converter.py",
      "name": "test_from_ffprobe_hdr",
      "full_name": "TestColorSpaceInfo.test_from_ffprobe_hdr",
      "lineno": 35,
      "end_lineno": 52,
      "loc": 18,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceInfo",
      "docstring": "Test HDR detection",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceInfo.test_from_ffprobe_missing_data": {
      "module": "tests/test_color_converter.py",
      "name": "test_from_ffprobe_missing_data",
      "full_name": "TestColorSpaceInfo.test_from_ffprobe_missing_data",
      "lineno": 54,
      "end_lineno": 64,
      "loc": 11,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceInfo",
      "docstring": "Test with missing color data",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceConverter.converter": {
      "module": "tests/test_color_converter.py",
      "name": "converter",
      "full_name": "TestColorSpaceConverter.converter",
      "lineno": 71,
      "end_lineno": 73,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestColorSpaceConverter",
      "docstring": "Create converter instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceConverter.test_analyze_color_space": {
      "module": "tests/test_color_converter.py",
      "name": "test_analyze_color_space",
      "full_name": "TestColorSpaceConverter.test_analyze_color_space",
      "lineno": 76,
      "end_lineno": 107,
      "loc": 32,
      "complexity": 8,
      "args": [
        "self",
        "mock_run",
        "converter"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceConverter",
      "docstring": "Test color space analysis",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceConverter.test_analyze_color_space_no_video": {
      "module": "tests/test_color_converter.py",
      "name": "test_analyze_color_space_no_video",
      "full_name": "TestColorSpaceConverter.test_analyze_color_space_no_video",
      "lineno": 110,
      "end_lineno": 119,
      "loc": 10,
      "complexity": 2,
      "args": [
        "self",
        "mock_run",
        "converter"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceConverter",
      "docstring": "Test handling of no video stream",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceConverter.test_validate_sdr_input": {
      "module": "tests/test_color_converter.py",
      "name": "test_validate_sdr_input",
      "full_name": "TestColorSpaceConverter.test_validate_sdr_input",
      "lineno": 122,
      "end_lineno": 150,
      "loc": 29,
      "complexity": 5,
      "args": [
        "self",
        "mock_analyze",
        "converter"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceConverter",
      "docstring": "Test SDR validation",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceConverter.test_build_color_conversion_filter": {
      "module": "tests/test_color_converter.py",
      "name": "test_build_color_conversion_filter",
      "full_name": "TestColorSpaceConverter.test_build_color_conversion_filter",
      "lineno": 152,
      "end_lineno": 160,
      "loc": 9,
      "complexity": 5,
      "args": [
        "self",
        "converter"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceConverter",
      "docstring": "Test filter building",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceConverter.test_convert_to_bt709": {
      "module": "tests/test_color_converter.py",
      "name": "test_convert_to_bt709",
      "full_name": "TestColorSpaceConverter.test_convert_to_bt709",
      "lineno": 164,
      "end_lineno": 189,
      "loc": 26,
      "complexity": 9,
      "args": [
        "self",
        "mock_analyze",
        "mock_run",
        "converter"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceConverter",
      "docstring": "Test BT.709 conversion",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceConverter.test_convert_to_bt709_hdr_rejection": {
      "module": "tests/test_color_converter.py",
      "name": "test_convert_to_bt709_hdr_rejection",
      "full_name": "TestColorSpaceConverter.test_convert_to_bt709_hdr_rejection",
      "lineno": 192,
      "end_lineno": 202,
      "loc": 11,
      "complexity": 2,
      "args": [
        "self",
        "mock_analyze",
        "converter"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceConverter",
      "docstring": "Test HDR input rejection during conversion",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceConverter.test_get_encoding_color_params": {
      "module": "tests/test_color_converter.py",
      "name": "test_get_encoding_color_params",
      "full_name": "TestColorSpaceConverter.test_get_encoding_color_params",
      "lineno": 204,
      "end_lineno": 211,
      "loc": 8,
      "complexity": 5,
      "args": [
        "self",
        "converter"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceConverter",
      "docstring": "Test encoding parameter generation",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSpaceConverter.test_build_safe_encoding_command": {
      "module": "tests/test_color_converter.py",
      "name": "test_build_safe_encoding_command",
      "full_name": "TestColorSpaceConverter.test_build_safe_encoding_command",
      "lineno": 213,
      "end_lineno": 232,
      "loc": 20,
      "complexity": 8,
      "args": [
        "self",
        "converter"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSpaceConverter",
      "docstring": "Test safe encoding command building",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestIntegrationFunctions.test_ensure_bt709_output": {
      "module": "tests/test_color_converter.py",
      "name": "test_ensure_bt709_output",
      "full_name": "TestIntegrationFunctions.test_ensure_bt709_output",
      "lineno": 240,
      "end_lineno": 258,
      "loc": 19,
      "complexity": 1,
      "args": [
        "self",
        "mock_convert",
        "mock_validate"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestIntegrationFunctions",
      "docstring": "Test ensure_bt709_output convenience function",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestIntegrationFunctions.test_get_safe_color_filter": {
      "module": "tests/test_color_converter.py",
      "name": "test_get_safe_color_filter",
      "full_name": "TestIntegrationFunctions.test_get_safe_color_filter",
      "lineno": 260,
      "end_lineno": 266,
      "loc": 7,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestIntegrationFunctions",
      "docstring": "Test filter string getter",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_color_converter.py:TestColorSafeVideoEditor.test_edit_with_color_safety": {
      "module": "tests/test_color_converter.py",
      "name": "test_edit_with_color_safety",
      "full_name": "TestColorSafeVideoEditor.test_edit_with_color_safety",
      "lineno": 275,
      "end_lineno": 301,
      "loc": 27,
      "complexity": 4,
      "args": [
        "self",
        "mock_analyze",
        "mock_validate",
        "mock_run"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestColorSafeVideoEditor",
      "docstring": "Test color-safe editing",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestEditSegment.test_segment_creation": {
      "module": "tests/test_concat_editor.py",
      "name": "test_segment_creation",
      "full_name": "TestEditSegment.test_segment_creation",
      "lineno": 13,
      "end_lineno": 23,
      "loc": 11,
      "complexity": 8,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestEditSegment",
      "docstring": "Test creating edit segment",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestEditSegment.test_custom_transition": {
      "module": "tests/test_concat_editor.py",
      "name": "test_custom_transition",
      "full_name": "TestEditSegment.test_custom_transition",
      "lineno": 25,
      "end_lineno": 32,
      "loc": 8,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestEditSegment",
      "docstring": "Test segment with custom transition",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.editor": {
      "module": "tests/test_concat_editor.py",
      "name": "editor",
      "full_name": "TestConcatEditor.editor",
      "lineno": 39,
      "end_lineno": 44,
      "loc": 6,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Create concat editor instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_create_concat_list": {
      "module": "tests/test_concat_editor.py",
      "name": "test_create_concat_list",
      "full_name": "TestConcatEditor.test_create_concat_list",
      "lineno": 46,
      "end_lineno": 62,
      "loc": 17,
      "complexity": 4,
      "args": [
        "self",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test concat list file creation",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_simple_concat": {
      "module": "tests/test_concat_editor.py",
      "name": "test_simple_concat",
      "full_name": "TestConcatEditor.test_simple_concat",
      "lineno": 65,
      "end_lineno": 77,
      "loc": 13,
      "complexity": 6,
      "args": [
        "self",
        "mock_run",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test simple concatenation without transitions",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_build_xfade_filter": {
      "module": "tests/test_concat_editor.py",
      "name": "test_build_xfade_filter",
      "full_name": "TestConcatEditor.test_build_xfade_filter",
      "lineno": 79,
      "end_lineno": 96,
      "loc": 18,
      "complexity": 6,
      "args": [
        "self",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test xfade filter generation",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_filter_length_constraint": {
      "module": "tests/test_concat_editor.py",
      "name": "test_filter_length_constraint",
      "full_name": "TestConcatEditor.test_filter_length_constraint",
      "lineno": 98,
      "end_lineno": 112,
      "loc": 15,
      "complexity": 4,
      "args": [
        "self",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test filter length verification for many segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_filter_length_single_segment": {
      "module": "tests/test_concat_editor.py",
      "name": "test_filter_length_single_segment",
      "full_name": "TestConcatEditor.test_filter_length_single_segment",
      "lineno": 114,
      "end_lineno": 121,
      "loc": 8,
      "complexity": 3,
      "args": [
        "self",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test filter length for single segment",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_extract_segments_to_files": {
      "module": "tests/test_concat_editor.py",
      "name": "test_extract_segments_to_files",
      "full_name": "TestConcatEditor.test_extract_segments_to_files",
      "lineno": 124,
      "end_lineno": 158,
      "loc": 35,
      "complexity": 10,
      "args": [
        "self",
        "mock_pipeline_class",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test parallel segment extraction",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_extract_segments_failure": {
      "module": "tests/test_concat_editor.py",
      "name": "test_extract_segments_failure",
      "full_name": "TestConcatEditor.test_extract_segments_failure",
      "lineno": 161,
      "end_lineno": 182,
      "loc": 22,
      "complexity": 2,
      "args": [
        "self",
        "mock_pipeline_class",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test handling of extraction failures",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_concat_with_transitions_small": {
      "module": "tests/test_concat_editor.py",
      "name": "test_concat_with_transitions_small",
      "full_name": "TestConcatEditor.test_concat_with_transitions_small",
      "lineno": 185,
      "end_lineno": 202,
      "loc": 18,
      "complexity": 3,
      "args": [
        "self",
        "mock_run",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test concatenation with transitions for small segment count",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_concat_with_transitions_large": {
      "module": "tests/test_concat_editor.py",
      "name": "test_concat_with_transitions_large",
      "full_name": "TestConcatEditor.test_concat_with_transitions_large",
      "lineno": 205,
      "end_lineno": 215,
      "loc": 11,
      "complexity": 2,
      "args": [
        "self",
        "mock_batch",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test fallback to batch transitions for many segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_cleanup_temp_files": {
      "module": "tests/test_concat_editor.py",
      "name": "test_cleanup_temp_files",
      "full_name": "TestConcatEditor.test_cleanup_temp_files",
      "lineno": 217,
      "end_lineno": 232,
      "loc": 16,
      "complexity": 5,
      "args": [
        "self",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test temporary file cleanup",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestConcatEditor.test_execute_edit_no_transitions": {
      "module": "tests/test_concat_editor.py",
      "name": "test_execute_edit_no_transitions",
      "full_name": "TestConcatEditor.test_execute_edit_no_transitions",
      "lineno": 236,
      "end_lineno": 258,
      "loc": 23,
      "complexity": 6,
      "args": [
        "self",
        "mock_concat",
        "mock_extract",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcatEditor",
      "docstring": "Test complete edit execution without transitions",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestHelperFunctions.test_create_edit_segments": {
      "module": "tests/test_concat_editor.py",
      "name": "test_create_edit_segments",
      "full_name": "TestHelperFunctions.test_create_edit_segments",
      "lineno": 264,
      "end_lineno": 293,
      "loc": 30,
      "complexity": 9,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestHelperFunctions",
      "docstring": "Test converting highlights to edit segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concat_editor.py:TestIntegration.test_full_edit_workflow": {
      "module": "tests/test_concat_editor.py",
      "name": "test_full_edit_workflow",
      "full_name": "TestIntegration.test_full_edit_workflow",
      "lineno": 301,
      "end_lineno": 322,
      "loc": 22,
      "complexity": 4,
      "args": [
        "self",
        "mock_pipeline_class",
        "mock_run"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestIntegration",
      "docstring": "Test complete editing workflow",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.validator": {
      "module": "tests/test_video_validator.py",
      "name": "validator",
      "full_name": "TestVideoValidator.validator",
      "lineno": 21,
      "end_lineno": 23,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Create validator instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.mock_ffprobe_output": {
      "module": "tests/test_video_validator.py",
      "name": "mock_ffprobe_output",
      "full_name": "TestVideoValidator.mock_ffprobe_output",
      "lineno": 26,
      "end_lineno": 54,
      "loc": 29,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Mock ffprobe output for a valid video",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": true,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_validate_file_not_exists": {
      "module": "tests/test_video_validator.py",
      "name": "test_validate_file_not_exists",
      "full_name": "TestVideoValidator.test_validate_file_not_exists",
      "lineno": 56,
      "end_lineno": 62,
      "loc": 7,
      "complexity": 4,
      "args": [
        "self",
        "validator"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test validation of non-existent file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_validate_empty_file": {
      "module": "tests/test_video_validator.py",
      "name": "test_validate_empty_file",
      "full_name": "TestVideoValidator.test_validate_empty_file",
      "lineno": 64,
      "end_lineno": 75,
      "loc": 12,
      "complexity": 3,
      "args": [
        "self",
        "validator"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test validation of empty file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_validate_valid_video": {
      "module": "tests/test_video_validator.py",
      "name": "test_validate_valid_video",
      "full_name": "TestVideoValidator.test_validate_valid_video",
      "lineno": 78,
      "end_lineno": 109,
      "loc": 32,
      "complexity": 11,
      "args": [
        "self",
        "mock_run",
        "validator",
        "mock_ffprobe_output"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test validation of valid video file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_detect_moov_atom_corruption": {
      "module": "tests/test_video_validator.py",
      "name": "test_detect_moov_atom_corruption",
      "full_name": "TestVideoValidator.test_detect_moov_atom_corruption",
      "lineno": 112,
      "end_lineno": 125,
      "loc": 14,
      "complexity": 2,
      "args": [
        "self",
        "mock_run",
        "validator"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test detection of moov atom corruption",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_detect_hdr_video": {
      "module": "tests/test_video_validator.py",
      "name": "test_detect_hdr_video",
      "full_name": "TestVideoValidator.test_detect_hdr_video",
      "lineno": 128,
      "end_lineno": 156,
      "loc": 29,
      "complexity": 3,
      "args": [
        "self",
        "mock_run",
        "validator"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test detection of HDR video (should fail validation)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_validate_metadata_duration_limits": {
      "module": "tests/test_video_validator.py",
      "name": "test_validate_metadata_duration_limits",
      "full_name": "TestVideoValidator.test_validate_metadata_duration_limits",
      "lineno": 158,
      "end_lineno": 179,
      "loc": 22,
      "complexity": 3,
      "args": [
        "self",
        "validator"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test duration validation limits",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_validate_metadata_resolution_limits": {
      "module": "tests/test_video_validator.py",
      "name": "test_validate_metadata_resolution_limits",
      "full_name": "TestVideoValidator.test_validate_metadata_resolution_limits",
      "lineno": 181,
      "end_lineno": 197,
      "loc": 17,
      "complexity": 2,
      "args": [
        "self",
        "validator"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test resolution validation limits",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_validate_metadata_fps_limits": {
      "module": "tests/test_video_validator.py",
      "name": "test_validate_metadata_fps_limits",
      "full_name": "TestVideoValidator.test_validate_metadata_fps_limits",
      "lineno": 199,
      "end_lineno": 215,
      "loc": 17,
      "complexity": 2,
      "args": [
        "self",
        "validator"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test frame rate validation limits",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_validate_metadata_unsupported_codec": {
      "module": "tests/test_video_validator.py",
      "name": "test_validate_metadata_unsupported_codec",
      "full_name": "TestVideoValidator.test_validate_metadata_unsupported_codec",
      "lineno": 217,
      "end_lineno": 234,
      "loc": 18,
      "complexity": 3,
      "args": [
        "self",
        "validator"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test unsupported codec detection",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_calculate_file_hash": {
      "module": "tests/test_video_validator.py",
      "name": "test_calculate_file_hash",
      "full_name": "TestVideoValidator.test_calculate_file_hash",
      "lineno": 236,
      "end_lineno": 258,
      "loc": 23,
      "complexity": 4,
      "args": [
        "self",
        "validator"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test file hash calculation",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_validate_and_store": {
      "module": "tests/test_video_validator.py",
      "name": "test_validate_and_store",
      "full_name": "TestVideoValidator.test_validate_and_store",
      "lineno": 261,
      "end_lineno": 297,
      "loc": 37,
      "complexity": 7,
      "args": [
        "self",
        "mock_run",
        "validator",
        "mock_ffprobe_output"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test complete validation and database storage",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db",
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestVideoValidator.test_validate_and_store_failure": {
      "module": "tests/test_video_validator.py",
      "name": "test_validate_and_store_failure",
      "full_name": "TestVideoValidator.test_validate_and_store_failure",
      "lineno": 300,
      "end_lineno": 328,
      "loc": 29,
      "complexity": 4,
      "args": [
        "self",
        "mock_run",
        "validator"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoValidator",
      "docstring": "Test validation failure updates database correctly",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db",
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestPreflightIntegration.test_perform_preflight_check_success": {
      "module": "tests/test_video_validator.py",
      "name": "test_perform_preflight_check_success",
      "full_name": "TestPreflightIntegration.test_perform_preflight_check_success",
      "lineno": 335,
      "end_lineno": 380,
      "loc": 46,
      "complexity": 5,
      "args": [
        "self",
        "mock_run"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestPreflightIntegration",
      "docstring": "Test successful preflight check",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db",
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_validator.py:TestPreflightIntegration.test_perform_preflight_check_failure": {
      "module": "tests/test_video_validator.py",
      "name": "test_perform_preflight_check_failure",
      "full_name": "TestPreflightIntegration.test_perform_preflight_check_failure",
      "lineno": 383,
      "end_lineno": 422,
      "loc": 40,
      "complexity": 3,
      "args": [
        "self",
        "mock_run"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestPreflightIntegration",
      "docstring": "Test failed preflight check",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db",
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concurrent_db.py:TestConcurrentDatabase.db": {
      "module": "tests/test_concurrent_db.py",
      "name": "db",
      "full_name": "TestConcurrentDatabase.db",
      "lineno": 15,
      "end_lineno": 17,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestConcurrentDatabase",
      "docstring": "Database instance for testing",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concurrent_db.py:TestConcurrentDatabase.test_concurrent_writes_no_deadlock": {
      "module": "tests/test_concurrent_db.py",
      "name": "test_concurrent_writes_no_deadlock",
      "full_name": "TestConcurrentDatabase.test_concurrent_writes_no_deadlock",
      "lineno": 19,
      "end_lineno": 82,
      "loc": 64,
      "complexity": 7,
      "args": [
        "self",
        "db"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcurrentDatabase",
      "docstring": "Test that concurrent writes don't cause deadlocks",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concurrent_db.py:TestConcurrentDatabase.test_connection_pool_limits": {
      "module": "tests/test_concurrent_db.py",
      "name": "test_connection_pool_limits",
      "full_name": "TestConcurrentDatabase.test_connection_pool_limits",
      "lineno": 84,
      "end_lineno": 105,
      "loc": 22,
      "complexity": 7,
      "args": [
        "self",
        "db"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcurrentDatabase",
      "docstring": "Test that connection pool respects size limits",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concurrent_db.py:TestConcurrentDatabase.test_transaction_isolation": {
      "module": "tests/test_concurrent_db.py",
      "name": "test_transaction_isolation",
      "full_name": "TestConcurrentDatabase.test_transaction_isolation",
      "lineno": 107,
      "end_lineno": 153,
      "loc": 47,
      "complexity": 3,
      "args": [
        "self",
        "db"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcurrentDatabase",
      "docstring": "Test transaction isolation between threads",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_concurrent_db.py:TestConcurrentDatabase.test_concurrent_checkpoint_updates": {
      "module": "tests/test_concurrent_db.py",
      "name": "test_concurrent_checkpoint_updates",
      "full_name": "TestConcurrentDatabase.test_concurrent_checkpoint_updates",
      "lineno": 156,
      "end_lineno": 212,
      "loc": 57,
      "complexity": 6,
      "args": [
        "self",
        "db",
        "num_workers"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestConcurrentDatabase",
      "docstring": "Test concurrent checkpoint updates don't conflict",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestLoudnessStats.test_from_json": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_from_json",
      "full_name": "TestLoudnessStats.test_from_json",
      "lineno": 19,
      "end_lineno": 35,
      "loc": 17,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestLoudnessStats",
      "docstring": "Test creating stats from JSON",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestLoudnessStats.test_from_json_missing_values": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_from_json_missing_values",
      "full_name": "TestLoudnessStats.test_from_json_missing_values",
      "lineno": 37,
      "end_lineno": 45,
      "loc": 9,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestLoudnessStats",
      "docstring": "Test with missing values uses defaults",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestNormalizationTarget.test_default_values": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_default_values",
      "full_name": "TestNormalizationTarget.test_default_values",
      "lineno": 51,
      "end_lineno": 57,
      "loc": 7,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestNormalizationTarget",
      "docstring": "Test default target values",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestNormalizationTarget.test_to_filter_params": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_to_filter_params",
      "full_name": "TestNormalizationTarget.test_to_filter_params",
      "lineno": 59,
      "end_lineno": 65,
      "loc": 7,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestNormalizationTarget",
      "docstring": "Test converting to filter parameters",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestAudioNormalizer.normalizer": {
      "module": "tests/test_audio_normalizer.py",
      "name": "normalizer",
      "full_name": "TestAudioNormalizer.normalizer",
      "lineno": 72,
      "end_lineno": 77,
      "loc": 6,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestAudioNormalizer",
      "docstring": "Create normalizer instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestAudioNormalizer.test_analyze_loudness": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_analyze_loudness",
      "full_name": "TestAudioNormalizer.test_analyze_loudness",
      "lineno": 80,
      "end_lineno": 108,
      "loc": 29,
      "complexity": 8,
      "args": [
        "self",
        "mock_run",
        "normalizer"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestAudioNormalizer",
      "docstring": "Test loudness analysis (pass 1)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestAudioNormalizer.test_analyze_loudness_parse_error": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_analyze_loudness_parse_error",
      "full_name": "TestAudioNormalizer.test_analyze_loudness_parse_error",
      "lineno": 111,
      "end_lineno": 121,
      "loc": 11,
      "complexity": 2,
      "args": [
        "self",
        "mock_run",
        "normalizer"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestAudioNormalizer",
      "docstring": "Test handling of parse errors",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestAudioNormalizer.test_apply_normalization": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_apply_normalization",
      "full_name": "TestAudioNormalizer.test_apply_normalization",
      "lineno": 124,
      "end_lineno": 156,
      "loc": 33,
      "complexity": 10,
      "args": [
        "self",
        "mock_run",
        "normalizer"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestAudioNormalizer",
      "docstring": "Test normalization application (pass 2)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestAudioNormalizer.test_normalize_audio_complete": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_normalize_audio_complete",
      "full_name": "TestAudioNormalizer.test_normalize_audio_complete",
      "lineno": 161,
      "end_lineno": 193,
      "loc": 33,
      "complexity": 5,
      "args": [
        "self",
        "mock_analyze",
        "mock_verify",
        "mock_apply",
        "normalizer"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestAudioNormalizer",
      "docstring": "Test complete normalization workflow",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestAudioNormalizer.test_normalize_segments": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_normalize_segments",
      "full_name": "TestAudioNormalizer.test_normalize_segments",
      "lineno": 196,
      "end_lineno": 232,
      "loc": 37,
      "complexity": 4,
      "args": [
        "self",
        "mock_run",
        "normalizer"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestAudioNormalizer",
      "docstring": "Test normalizing multiple segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestAudioNormalizer.test_apply_ebur128_analysis": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_apply_ebur128_analysis",
      "full_name": "TestAudioNormalizer.test_apply_ebur128_analysis",
      "lineno": 235,
      "end_lineno": 260,
      "loc": 26,
      "complexity": 4,
      "args": [
        "self",
        "mock_run",
        "normalizer"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestAudioNormalizer",
      "docstring": "Test EBU R128 analysis",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestIntegration.test_normalize_video_audio": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_normalize_video_audio",
      "full_name": "TestIntegration.test_normalize_video_audio",
      "lineno": 267,
      "end_lineno": 289,
      "loc": 23,
      "complexity": 4,
      "args": [
        "self",
        "mock_run"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestIntegration",
      "docstring": "Test the convenience function",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestIntegration.test_meets_spread_requirement": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_meets_spread_requirement",
      "full_name": "TestIntegration.test_meets_spread_requirement",
      "lineno": 292,
      "end_lineno": 323,
      "loc": 32,
      "complexity": 3,
      "args": [
        "self",
        "mock_run"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestIntegration",
      "docstring": "Test verification of spread requirement (\u2264 1.5 LU)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestErrorHandling.test_ffmpeg_error": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_ffmpeg_error",
      "full_name": "TestErrorHandling.test_ffmpeg_error",
      "lineno": 330,
      "end_lineno": 339,
      "loc": 10,
      "complexity": 1,
      "args": [
        "self",
        "mock_run"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestErrorHandling",
      "docstring": "Test handling of FFmpeg errors",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_audio_normalizer.py:TestErrorHandling.test_invalid_json_response": {
      "module": "tests/test_audio_normalizer.py",
      "name": "test_invalid_json_response",
      "full_name": "TestErrorHandling.test_invalid_json_response",
      "lineno": 342,
      "end_lineno": 351,
      "loc": 10,
      "complexity": 2,
      "args": [
        "self",
        "mock_run"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestErrorHandling",
      "docstring": "Test handling of invalid JSON in response",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_database_setup.py:TestDatabaseSetup.db_connection": {
      "module": "tests/test_database_setup.py",
      "name": "db_connection",
      "full_name": "TestDatabaseSetup.db_connection",
      "lineno": 10,
      "end_lineno": 20,
      "loc": 11,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestDatabaseSetup",
      "docstring": "Create a test database connection",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_database_setup.py:TestDatabaseSetup.test_tables_exist": {
      "module": "tests/test_database_setup.py",
      "name": "test_tables_exist",
      "full_name": "TestDatabaseSetup.test_tables_exist",
      "lineno": 22,
      "end_lineno": 49,
      "loc": 28,
      "complexity": 4,
      "args": [
        "self",
        "db_connection"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabaseSetup",
      "docstring": "Verify all required tables exist",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_database_setup.py:TestDatabaseSetup.test_video_job_columns": {
      "module": "tests/test_database_setup.py",
      "name": "test_video_job_columns",
      "full_name": "TestDatabaseSetup.test_video_job_columns",
      "lineno": 51,
      "end_lineno": 76,
      "loc": 26,
      "complexity": 6,
      "args": [
        "self",
        "db_connection"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabaseSetup",
      "docstring": "Verify video_job table has all required columns",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_database_setup.py:TestDatabaseSetup.test_indexes_exist": {
      "module": "tests/test_database_setup.py",
      "name": "test_indexes_exist",
      "full_name": "TestDatabaseSetup.test_indexes_exist",
      "lineno": 78,
      "end_lineno": 103,
      "loc": 26,
      "complexity": 4,
      "args": [
        "self",
        "db_connection"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabaseSetup",
      "docstring": "Verify performance indexes were created",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_database_setup.py:TestDatabaseSetup.test_uuid_extension": {
      "module": "tests/test_database_setup.py",
      "name": "test_uuid_extension",
      "full_name": "TestDatabaseSetup.test_uuid_extension",
      "lineno": 105,
      "end_lineno": 120,
      "loc": 16,
      "complexity": 2,
      "args": [
        "self",
        "db_connection"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabaseSetup",
      "docstring": "Verify uuid-ossp extension is installed",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_database_setup.py:TestDatabaseSetup.test_foreign_keys": {
      "module": "tests/test_database_setup.py",
      "name": "test_foreign_keys",
      "full_name": "TestDatabaseSetup.test_foreign_keys",
      "lineno": 122,
      "end_lineno": 154,
      "loc": 33,
      "complexity": 6,
      "args": [
        "self",
        "db_connection"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabaseSetup",
      "docstring": "Verify foreign key constraints are properly set up",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint_recovery.py:TestCheckpointRecovery.checkpoint_manager": {
      "module": "tests/test_checkpoint_recovery.py",
      "name": "checkpoint_manager",
      "full_name": "TestCheckpointRecovery.checkpoint_manager",
      "lineno": 18,
      "end_lineno": 20,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestCheckpointRecovery",
      "docstring": "Checkpoint manager instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint_recovery.py:TestCheckpointRecovery.db": {
      "module": "tests/test_checkpoint_recovery.py",
      "name": "db",
      "full_name": "TestCheckpointRecovery.db",
      "lineno": 23,
      "end_lineno": 25,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestCheckpointRecovery",
      "docstring": "Database instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint_recovery.py:TestCheckpointRecovery.editor": {
      "module": "tests/test_checkpoint_recovery.py",
      "name": "editor",
      "full_name": "TestCheckpointRecovery.editor",
      "lineno": 28,
      "end_lineno": 30,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestCheckpointRecovery",
      "docstring": "Video editor instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint_recovery.py:TestCheckpointRecovery.test_checkpoint_save_and_load": {
      "module": "tests/test_checkpoint_recovery.py",
      "name": "test_checkpoint_save_and_load",
      "full_name": "TestCheckpointRecovery.test_checkpoint_save_and_load",
      "lineno": 32,
      "end_lineno": 54,
      "loc": 23,
      "complexity": 7,
      "args": [
        "self",
        "checkpoint_manager"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointRecovery",
      "docstring": "Test basic checkpoint save and load",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint_recovery.py:TestCheckpointRecovery.test_resume_after_analysis_crash": {
      "module": "tests/test_checkpoint_recovery.py",
      "name": "test_resume_after_analysis_crash",
      "full_name": "TestCheckpointRecovery.test_resume_after_analysis_crash",
      "lineno": 56,
      "end_lineno": 133,
      "loc": 78,
      "complexity": 9,
      "args": [
        "self",
        "checkpoint_manager",
        "db",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointRecovery",
      "docstring": "Test resuming from highlight stage after analysis crash",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint_recovery.py:TestCheckpointRecovery.test_checkpoint_expiry": {
      "module": "tests/test_checkpoint_recovery.py",
      "name": "test_checkpoint_expiry",
      "full_name": "TestCheckpointRecovery.test_checkpoint_expiry",
      "lineno": 135,
      "end_lineno": 157,
      "loc": 23,
      "complexity": 3,
      "args": [
        "self",
        "checkpoint_manager"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointRecovery",
      "docstring": "Test checkpoint TTL expiration",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint_recovery.py:TestCheckpointRecovery.test_stage_progression": {
      "module": "tests/test_checkpoint_recovery.py",
      "name": "test_stage_progression",
      "full_name": "TestCheckpointRecovery.test_stage_progression",
      "lineno": 159,
      "end_lineno": 179,
      "loc": 21,
      "complexity": 5,
      "args": [
        "self",
        "checkpoint_manager",
        "db"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointRecovery",
      "docstring": "Test proper stage progression with checkpoints",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint_recovery.py:TestCheckpointRecovery.test_concurrent_checkpoint_access": {
      "module": "tests/test_checkpoint_recovery.py",
      "name": "test_concurrent_checkpoint_access",
      "full_name": "TestCheckpointRecovery.test_concurrent_checkpoint_access",
      "lineno": 181,
      "end_lineno": 220,
      "loc": 40,
      "complexity": 5,
      "args": [
        "self",
        "checkpoint_manager"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointRecovery",
      "docstring": "Test concurrent checkpoint operations",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint_recovery.py:TestCheckpointRecovery.test_checkpoint_with_complex_data": {
      "module": "tests/test_checkpoint_recovery.py",
      "name": "test_checkpoint_with_complex_data",
      "full_name": "TestCheckpointRecovery.test_checkpoint_with_complex_data",
      "lineno": 222,
      "end_lineno": 262,
      "loc": 41,
      "complexity": 8,
      "args": [
        "self",
        "checkpoint_manager"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointRecovery",
      "docstring": "Test checkpointing complex data structures",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint_recovery.py:TestCheckpointRecovery._create_test_video": {
      "module": "tests/test_checkpoint_recovery.py",
      "name": "_create_test_video",
      "full_name": "TestCheckpointRecovery._create_test_video",
      "lineno": 264,
      "end_lineno": 291,
      "loc": 28,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointRecovery",
      "docstring": "Create a simple test video",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_e2e.py:create_test_video": {
      "module": "tests/test_e2e.py",
      "name": "create_test_video",
      "full_name": "create_test_video",
      "lineno": 14,
      "end_lineno": 54,
      "loc": 41,
      "complexity": 4,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Create a test video file for testing",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_e2e.py:test_video_analysis": {
      "module": "tests/test_e2e.py",
      "name": "test_video_analysis",
      "full_name": "test_video_analysis",
      "lineno": 57,
      "end_lineno": 74,
      "loc": 18,
      "complexity": 7,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Test video analysis module",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_e2e.py:test_highlight_selection": {
      "module": "tests/test_e2e.py",
      "name": "test_highlight_selection",
      "full_name": "test_highlight_selection",
      "lineno": 77,
      "end_lineno": 101,
      "loc": 25,
      "complexity": 4,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Test highlight selection module",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_e2e.py:test_ffmpeg_utils": {
      "module": "tests/test_e2e.py",
      "name": "test_ffmpeg_utils",
      "full_name": "test_ffmpeg_utils",
      "lineno": 104,
      "end_lineno": 137,
      "loc": 34,
      "complexity": 9,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Test FFmpeg utilities",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_e2e.py:test_mcp_server": {
      "module": "tests/test_e2e.py",
      "name": "test_mcp_server",
      "full_name": "test_mcp_server",
      "lineno": 140,
      "end_lineno": 165,
      "loc": 26,
      "complexity": 4,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Test MCP server functionality",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "http"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_e2e.py:test_e2e_pipeline": {
      "module": "tests/test_e2e.py",
      "name": "test_e2e_pipeline",
      "full_name": "test_e2e_pipeline",
      "lineno": 168,
      "end_lineno": 200,
      "loc": 33,
      "complexity": 5,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "End-to-end pipeline test",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_e2e.py:test_pipeline_json_output": {
      "module": "tests/test_e2e.py",
      "name": "test_pipeline_json_output",
      "full_name": "test_pipeline_json_output",
      "lineno": 203,
      "end_lineno": 244,
      "loc": 42,
      "complexity": 9,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Test pipeline JSON output",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestVideoSegment.test_segment_creation": {
      "module": "tests/test_video_processor.py",
      "name": "test_segment_creation",
      "full_name": "TestVideoSegment.test_segment_creation",
      "lineno": 21,
      "end_lineno": 29,
      "loc": 9,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoSegment",
      "docstring": "Test creating video segment",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestVideoSegment.test_segment_with_custom_id": {
      "module": "tests/test_video_processor.py",
      "name": "test_segment_with_custom_id",
      "full_name": "TestVideoSegment.test_segment_with_custom_id",
      "lineno": 31,
      "end_lineno": 34,
      "loc": 4,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoSegment",
      "docstring": "Test segment with custom ID",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestFIFOManager.test_create_fifo": {
      "module": "tests/test_video_processor.py",
      "name": "test_create_fifo",
      "full_name": "TestFIFOManager.test_create_fifo",
      "lineno": 40,
      "end_lineno": 57,
      "loc": 18,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestFIFOManager",
      "docstring": "Test FIFO creation",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestFIFOManager.test_multiple_fifos": {
      "module": "tests/test_video_processor.py",
      "name": "test_multiple_fifos",
      "full_name": "TestFIFOManager.test_multiple_fifos",
      "lineno": 59,
      "end_lineno": 78,
      "loc": 20,
      "complexity": 7,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestFIFOManager",
      "docstring": "Test creating multiple FIFOs",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestFIFOManager.test_context_manager": {
      "module": "tests/test_video_processor.py",
      "name": "test_context_manager",
      "full_name": "TestFIFOManager.test_context_manager",
      "lineno": 80,
      "end_lineno": 90,
      "loc": 11,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestFIFOManager",
      "docstring": "Test FIFO manager as context manager",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestFIFOManager.test_fifo_creation_error": {
      "module": "tests/test_video_processor.py",
      "name": "test_fifo_creation_error",
      "full_name": "TestFIFOManager.test_fifo_creation_error",
      "lineno": 93,
      "end_lineno": 99,
      "loc": 7,
      "complexity": 1,
      "args": [
        "self",
        "mock_mkfifo"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestFIFOManager",
      "docstring": "Test error handling in FIFO creation",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestFFmpegPipeline.test_add_process": {
      "module": "tests/test_video_processor.py",
      "name": "test_add_process",
      "full_name": "TestFFmpegPipeline.test_add_process",
      "lineno": 106,
      "end_lineno": 127,
      "loc": 22,
      "complexity": 4,
      "args": [
        "self",
        "mock_popen"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestFFmpegPipeline",
      "docstring": "Test adding process to pipeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestFFmpegPipeline.test_wait_all_success": {
      "module": "tests/test_video_processor.py",
      "name": "test_wait_all_success",
      "full_name": "TestFFmpegPipeline.test_wait_all_success",
      "lineno": 130,
      "end_lineno": 149,
      "loc": 20,
      "complexity": 2,
      "args": [
        "self",
        "mock_popen"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestFFmpegPipeline",
      "docstring": "Test waiting for all processes successfully",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestFFmpegPipeline.test_wait_all_failure": {
      "module": "tests/test_video_processor.py",
      "name": "test_wait_all_failure",
      "full_name": "TestFFmpegPipeline.test_wait_all_failure",
      "lineno": 152,
      "end_lineno": 166,
      "loc": 15,
      "complexity": 2,
      "args": [
        "self",
        "mock_popen"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestFFmpegPipeline",
      "docstring": "Test handling process failures",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestFFmpegPipeline.test_wait_all_timeout": {
      "module": "tests/test_video_processor.py",
      "name": "test_wait_all_timeout",
      "full_name": "TestFFmpegPipeline.test_wait_all_timeout",
      "lineno": 169,
      "end_lineno": 183,
      "loc": 15,
      "complexity": 2,
      "args": [
        "self",
        "mock_popen"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestFFmpegPipeline",
      "docstring": "Test timeout handling",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestFFmpegPipeline.test_cleanup": {
      "module": "tests/test_video_processor.py",
      "name": "test_cleanup",
      "full_name": "TestFFmpegPipeline.test_cleanup",
      "lineno": 185,
      "end_lineno": 199,
      "loc": 15,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestFFmpegPipeline",
      "docstring": "Test pipeline cleanup",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestVideoEditor.editor": {
      "module": "tests/test_video_processor.py",
      "name": "editor",
      "full_name": "TestVideoEditor.editor",
      "lineno": 206,
      "end_lineno": 208,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestVideoEditor",
      "docstring": "Create video editor instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestVideoEditor.test_extract_segments_parallel": {
      "module": "tests/test_video_processor.py",
      "name": "test_extract_segments_parallel",
      "full_name": "TestVideoEditor.test_extract_segments_parallel",
      "lineno": 211,
      "end_lineno": 241,
      "loc": 31,
      "complexity": 8,
      "args": [
        "self",
        "mock_popen",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoEditor",
      "docstring": "Test parallel segment extraction",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestVideoEditor.test_create_concat_list": {
      "module": "tests/test_video_processor.py",
      "name": "test_create_concat_list",
      "full_name": "TestVideoEditor.test_create_concat_list",
      "lineno": 243,
      "end_lineno": 259,
      "loc": 17,
      "complexity": 4,
      "args": [
        "self",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoEditor",
      "docstring": "Test concat list creation",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestVideoEditor.test_concatenate_segments_fifo": {
      "module": "tests/test_video_processor.py",
      "name": "test_concatenate_segments_fifo",
      "full_name": "TestVideoEditor.test_concatenate_segments_fifo",
      "lineno": 263,
      "end_lineno": 283,
      "loc": 21,
      "complexity": 4,
      "args": [
        "self",
        "mock_mkfifo",
        "mock_popen",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoEditor",
      "docstring": "Test FIFO-based concatenation",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestVideoEditor.test_apply_transitions_no_transitions": {
      "module": "tests/test_video_processor.py",
      "name": "test_apply_transitions_no_transitions",
      "full_name": "TestVideoEditor.test_apply_transitions_no_transitions",
      "lineno": 286,
      "end_lineno": 295,
      "loc": 10,
      "complexity": 3,
      "args": [
        "self",
        "mock_run",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoEditor",
      "docstring": "Test handling no transitions",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestVideoEditor.test_apply_transitions_with_points": {
      "module": "tests/test_video_processor.py",
      "name": "test_apply_transitions_with_points",
      "full_name": "TestVideoEditor.test_apply_transitions_with_points",
      "lineno": 298,
      "end_lineno": 311,
      "loc": 14,
      "complexity": 4,
      "args": [
        "self",
        "mock_process",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoEditor",
      "docstring": "Test applying transitions",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestVideoEditor.test_process_with_filter_fifo": {
      "module": "tests/test_video_processor.py",
      "name": "test_process_with_filter_fifo",
      "full_name": "TestVideoEditor.test_process_with_filter_fifo",
      "lineno": 314,
      "end_lineno": 339,
      "loc": 26,
      "complexity": 6,
      "args": [
        "self",
        "mock_pipeline_class",
        "editor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestVideoEditor",
      "docstring": "Test filter processing with FIFO",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestIntegration.test_extract_and_concatenate_efficient": {
      "module": "tests/test_video_processor.py",
      "name": "test_extract_and_concatenate_efficient",
      "full_name": "TestIntegration.test_extract_and_concatenate_efficient",
      "lineno": 347,
      "end_lineno": 377,
      "loc": 31,
      "complexity": 3,
      "args": [
        "self",
        "mock_mkfifo",
        "mock_popen"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestIntegration",
      "docstring": "Test complete extraction and concatenation workflow",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_video_processor.py:TestIntegration.test_performance_requirement": {
      "module": "tests/test_video_processor.py",
      "name": "test_performance_requirement",
      "full_name": "TestIntegration.test_performance_requirement",
      "lineno": 379,
      "end_lineno": 402,
      "loc": 24,
      "complexity": 5,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestIntegration",
      "docstring": "Test that processing meets performance requirements",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_db_pool.py:TestDatabasePool.setup": {
      "module": "tests/test_db_pool.py",
      "name": "setup",
      "full_name": "TestDatabasePool.setup",
      "lineno": 18,
      "end_lineno": 34,
      "loc": 17,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabasePool",
      "docstring": "Setup test table before each test",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_db_pool.py:TestDatabasePool.test_singleton_pool": {
      "module": "tests/test_db_pool.py",
      "name": "test_singleton_pool",
      "full_name": "TestDatabasePool.test_singleton_pool",
      "lineno": 36,
      "end_lineno": 40,
      "loc": 5,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabasePool",
      "docstring": "Test that pool is a singleton",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_db_pool.py:TestDatabasePool.test_pool_size_limits": {
      "module": "tests/test_db_pool.py",
      "name": "test_pool_size_limits",
      "full_name": "TestDatabasePool.test_pool_size_limits",
      "lineno": 42,
      "end_lineno": 48,
      "loc": 7,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabasePool",
      "docstring": "Test pool respects size configuration",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_db_pool.py:TestDatabasePool.test_basic_operations": {
      "module": "tests/test_db_pool.py",
      "name": "test_basic_operations",
      "full_name": "TestDatabasePool.test_basic_operations",
      "lineno": 50,
      "end_lineno": 74,
      "loc": 25,
      "complexity": 7,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabasePool",
      "docstring": "Test basic CRUD operations",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_db_pool.py:TestDatabasePool.test_concurrent_writes_no_deadlock": {
      "module": "tests/test_db_pool.py",
      "name": "test_concurrent_writes_no_deadlock",
      "full_name": "TestDatabasePool.test_concurrent_writes_no_deadlock",
      "lineno": 76,
      "end_lineno": 135,
      "loc": 60,
      "complexity": 9,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabasePool",
      "docstring": "Test concurrent writes don't cause deadlocks (as per acceptance criteria)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_db_pool.py:TestDatabasePool.test_transaction_isolation": {
      "module": "tests/test_db_pool.py",
      "name": "test_transaction_isolation",
      "full_name": "TestDatabasePool.test_transaction_isolation",
      "lineno": 137,
      "end_lineno": 184,
      "loc": 48,
      "complexity": 5,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabasePool",
      "docstring": "Test transaction isolation between threads",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_db_pool.py:TestDatabasePool.test_connection_exhaustion": {
      "module": "tests/test_db_pool.py",
      "name": "test_connection_exhaustion",
      "full_name": "TestDatabasePool.test_connection_exhaustion",
      "lineno": 186,
      "end_lineno": 207,
      "loc": 22,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabasePool",
      "docstring": "Test behavior when connections are exhausted",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_db_pool.py:TestDatabasePool.test_retry_mechanism": {
      "module": "tests/test_db_pool.py",
      "name": "test_retry_mechanism",
      "full_name": "TestDatabasePool.test_retry_mechanism",
      "lineno": 209,
      "end_lineno": 222,
      "loc": 14,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabasePool",
      "docstring": "Test retry mechanism for transient failures",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_db_pool.py:TestDatabasePool.test_savepoint_rollback": {
      "module": "tests/test_db_pool.py",
      "name": "test_savepoint_rollback",
      "full_name": "TestDatabasePool.test_savepoint_rollback",
      "lineno": 224,
      "end_lineno": 256,
      "loc": 33,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestDatabasePool",
      "docstring": "Test savepoint functionality in transactions",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_db_pool.py:test_pytest_xdist_compatibility": {
      "module": "tests/test_db_pool.py",
      "name": "test_pytest_xdist_compatibility",
      "full_name": "test_pytest_xdist_compatibility",
      "lineno": 260,
      "end_lineno": 273,
      "loc": 14,
      "complexity": 3,
      "args": [
        "n_workers"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Test compatibility with pytest-xdist parallel execution",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointManager.checkpoint_mgr": {
      "module": "tests/test_checkpoint.py",
      "name": "checkpoint_mgr",
      "full_name": "TestCheckpointManager.checkpoint_mgr",
      "lineno": 15,
      "end_lineno": 17,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestCheckpointManager",
      "docstring": "Create checkpoint manager instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointManager.test_job_id": {
      "module": "tests/test_checkpoint.py",
      "name": "test_job_id",
      "full_name": "TestCheckpointManager.test_job_id",
      "lineno": 20,
      "end_lineno": 22,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestCheckpointManager",
      "docstring": "Generate unique job ID for tests",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointManager.test_save_and_load_checkpoint": {
      "module": "tests/test_checkpoint.py",
      "name": "test_save_and_load_checkpoint",
      "full_name": "TestCheckpointManager.test_save_and_load_checkpoint",
      "lineno": 24,
      "end_lineno": 41,
      "loc": 18,
      "complexity": 5,
      "args": [
        "self",
        "checkpoint_mgr",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointManager",
      "docstring": "Test basic save and load operations",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointManager.test_checkpoint_expiry": {
      "module": "tests/test_checkpoint.py",
      "name": "test_checkpoint_expiry",
      "full_name": "TestCheckpointManager.test_checkpoint_expiry",
      "lineno": 43,
      "end_lineno": 54,
      "loc": 12,
      "complexity": 3,
      "args": [
        "self",
        "checkpoint_mgr",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointManager",
      "docstring": "Test checkpoint TTL behavior",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointManager.test_get_last_successful_stage": {
      "module": "tests/test_checkpoint.py",
      "name": "test_get_last_successful_stage",
      "full_name": "TestCheckpointManager.test_get_last_successful_stage",
      "lineno": 56,
      "end_lineno": 70,
      "loc": 15,
      "complexity": 3,
      "args": [
        "self",
        "checkpoint_mgr",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointManager",
      "docstring": "Test retrieving last successful stage",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointManager.test_postgres_fallback": {
      "module": "tests/test_checkpoint.py",
      "name": "test_postgres_fallback",
      "full_name": "TestCheckpointManager.test_postgres_fallback",
      "lineno": 72,
      "end_lineno": 96,
      "loc": 25,
      "complexity": 5,
      "args": [
        "self",
        "checkpoint_mgr",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointManager",
      "docstring": "Test fallback to PostgreSQL when Redis doesn't have data",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointManager.test_delete_job_checkpoints": {
      "module": "tests/test_checkpoint.py",
      "name": "test_delete_job_checkpoints",
      "full_name": "TestCheckpointManager.test_delete_job_checkpoints",
      "lineno": 98,
      "end_lineno": 114,
      "loc": 17,
      "complexity": 6,
      "args": [
        "self",
        "checkpoint_mgr",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointManager",
      "docstring": "Test deleting all checkpoints for a job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointManager.test_atomic_checkpoint": {
      "module": "tests/test_checkpoint.py",
      "name": "test_atomic_checkpoint",
      "full_name": "TestCheckpointManager.test_atomic_checkpoint",
      "lineno": 116,
      "end_lineno": 135,
      "loc": 20,
      "complexity": 4,
      "args": [
        "self",
        "checkpoint_mgr",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointManager",
      "docstring": "Test atomic checkpoint context manager",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointManager.test_job_progress": {
      "module": "tests/test_checkpoint.py",
      "name": "test_job_progress",
      "full_name": "TestCheckpointManager.test_job_progress",
      "lineno": 137,
      "end_lineno": 149,
      "loc": 13,
      "complexity": 6,
      "args": [
        "self",
        "checkpoint_mgr",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointManager",
      "docstring": "Test getting job progress information",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestSmartVideoEditorCheckpoint.editor_checkpoint": {
      "module": "tests/test_checkpoint.py",
      "name": "editor_checkpoint",
      "full_name": "TestSmartVideoEditorCheckpoint.editor_checkpoint",
      "lineno": 156,
      "end_lineno": 159,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestSmartVideoEditorCheckpoint",
      "docstring": "Create editor checkpoint instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "gpu"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestSmartVideoEditorCheckpoint.test_job_id": {
      "module": "tests/test_checkpoint.py",
      "name": "test_job_id",
      "full_name": "TestSmartVideoEditorCheckpoint.test_job_id",
      "lineno": 162,
      "end_lineno": 164,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "fixture"
      ],
      "is_method": true,
      "class_name": "TestSmartVideoEditorCheckpoint",
      "docstring": "Generate unique job ID for tests",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestSmartVideoEditorCheckpoint.test_crash_recovery_simulation": {
      "module": "tests/test_checkpoint.py",
      "name": "test_crash_recovery_simulation",
      "full_name": "TestSmartVideoEditorCheckpoint.test_crash_recovery_simulation",
      "lineno": 166,
      "end_lineno": 201,
      "loc": 36,
      "complexity": 10,
      "args": [
        "self",
        "editor_checkpoint",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestSmartVideoEditorCheckpoint",
      "docstring": "Simulate crash and recovery as per acceptance criteria",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestSmartVideoEditorCheckpoint.test_stage_progression": {
      "module": "tests/test_checkpoint.py",
      "name": "test_stage_progression",
      "full_name": "TestSmartVideoEditorCheckpoint.test_stage_progression",
      "lineno": 203,
      "end_lineno": 225,
      "loc": 23,
      "complexity": 4,
      "args": [
        "self",
        "editor_checkpoint",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestSmartVideoEditorCheckpoint",
      "docstring": "Test correct stage progression logic",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestSmartVideoEditorCheckpoint.test_skip_completed_stages": {
      "module": "tests/test_checkpoint.py",
      "name": "test_skip_completed_stages",
      "full_name": "TestSmartVideoEditorCheckpoint.test_skip_completed_stages",
      "lineno": 227,
      "end_lineno": 242,
      "loc": 16,
      "complexity": 6,
      "args": [
        "self",
        "editor_checkpoint",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestSmartVideoEditorCheckpoint",
      "docstring": "Test skipping already completed stages",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestSmartVideoEditorCheckpoint.test_load_stage_specific_data": {
      "module": "tests/test_checkpoint.py",
      "name": "test_load_stage_specific_data",
      "full_name": "TestSmartVideoEditorCheckpoint.test_load_stage_specific_data",
      "lineno": 244,
      "end_lineno": 261,
      "loc": 18,
      "complexity": 6,
      "args": [
        "self",
        "editor_checkpoint",
        "test_job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestSmartVideoEditorCheckpoint",
      "docstring": "Test loading stage-specific checkpoint data",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointIntegration.test_concurrent_checkpoint_access": {
      "module": "tests/test_checkpoint.py",
      "name": "test_concurrent_checkpoint_access",
      "full_name": "TestCheckpointIntegration.test_concurrent_checkpoint_access",
      "lineno": 268,
      "end_lineno": 304,
      "loc": 37,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointIntegration",
      "docstring": "Test concurrent access to checkpoints",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "tests/test_checkpoint.py:TestCheckpointIntegration.test_redis_connection_recovery": {
      "module": "tests/test_checkpoint.py",
      "name": "test_redis_connection_recovery",
      "full_name": "TestCheckpointIntegration.test_redis_connection_recovery",
      "lineno": 306,
      "end_lineno": 327,
      "loc": 22,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TestCheckpointIntegration",
      "docstring": "Test behavior when Redis connection is lost and recovered",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": true,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/metrics_demo.py:VideoProcessingDemo.__init__": {
      "module": "examples/metrics_demo.py",
      "name": "__init__",
      "full_name": "VideoProcessingDemo.__init__",
      "lineno": 22,
      "end_lineno": 25,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingDemo",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/metrics_demo.py:VideoProcessingDemo.process_job": {
      "module": "examples/metrics_demo.py",
      "name": "process_job",
      "full_name": "VideoProcessingDemo.process_job",
      "lineno": 28,
      "end_lineno": 52,
      "loc": 25,
      "complexity": 2,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [
        "with_job_tracking"
      ],
      "is_method": true,
      "class_name": "VideoProcessingDemo",
      "docstring": "Process a complete video job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/metrics_demo.py:VideoProcessingDemo.validate_video": {
      "module": "examples/metrics_demo.py",
      "name": "validate_video",
      "full_name": "VideoProcessingDemo.validate_video",
      "lineno": 55,
      "end_lineno": 64,
      "loc": 10,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingDemo",
      "docstring": "Validate video file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/metrics_demo.py:VideoProcessingDemo.analyze_video": {
      "module": "examples/metrics_demo.py",
      "name": "analyze_video",
      "full_name": "VideoProcessingDemo.analyze_video",
      "lineno": 67,
      "end_lineno": 90,
      "loc": 24,
      "complexity": 2,
      "args": [
        "self",
        "job_id",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingDemo",
      "docstring": "Analyze video content",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/metrics_demo.py:VideoProcessingDemo.transcribe_audio": {
      "module": "examples/metrics_demo.py",
      "name": "transcribe_audio",
      "full_name": "VideoProcessingDemo.transcribe_audio",
      "lineno": 93,
      "end_lineno": 105,
      "loc": 13,
      "complexity": 2,
      "args": [
        "self",
        "job_id",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingDemo",
      "docstring": "Transcribe audio track",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/metrics_demo.py:VideoProcessingDemo.edit_video": {
      "module": "examples/metrics_demo.py",
      "name": "edit_video",
      "full_name": "VideoProcessingDemo.edit_video",
      "lineno": 108,
      "end_lineno": 120,
      "loc": 13,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingDemo",
      "docstring": "Edit video based on segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/metrics_demo.py:VideoProcessingDemo.normalize_audio": {
      "module": "examples/metrics_demo.py",
      "name": "normalize_audio",
      "full_name": "VideoProcessingDemo.normalize_audio",
      "lineno": 123,
      "end_lineno": 138,
      "loc": 16,
      "complexity": 1,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingDemo",
      "docstring": "Normalize audio levels",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/metrics_demo.py:VideoProcessingDemo.simulate_workload": {
      "module": "examples/metrics_demo.py",
      "name": "simulate_workload",
      "full_name": "VideoProcessingDemo.simulate_workload",
      "lineno": 140,
      "end_lineno": 185,
      "loc": 46,
      "complexity": 3,
      "args": [
        "self",
        "num_jobs"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingDemo",
      "docstring": "Simulate processing multiple jobs",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/metrics_demo.py:VideoProcessingDemo.print_summary": {
      "module": "examples/metrics_demo.py",
      "name": "print_summary",
      "full_name": "VideoProcessingDemo.print_summary",
      "lineno": 187,
      "end_lineno": 204,
      "loc": 18,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProcessingDemo",
      "docstring": "Print metrics summary",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/metrics_demo.py:main": {
      "module": "examples/metrics_demo.py",
      "name": "main",
      "full_name": "main",
      "lineno": 207,
      "end_lineno": 222,
      "loc": 16,
      "complexity": 3,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Run the demo",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/checkpoint_demo.py:simulate_video_processing_with_checkpoints": {
      "module": "examples/checkpoint_demo.py",
      "name": "simulate_video_processing_with_checkpoints",
      "full_name": "simulate_video_processing_with_checkpoints",
      "lineno": 15,
      "end_lineno": 109,
      "loc": 95,
      "complexity": 6,
      "args": [
        "job_id",
        "simulate_crash_at"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Simulate video processing pipeline with checkpoint support",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "gpu",
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/checkpoint_demo.py:generate_stage_results": {
      "module": "examples/checkpoint_demo.py",
      "name": "generate_stage_results",
      "full_name": "generate_stage_results",
      "lineno": 112,
      "end_lineno": 169,
      "loc": 58,
      "complexity": 1,
      "args": [
        "stage"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Generate mock results for each stage",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "examples/checkpoint_demo.py:main": {
      "module": "examples/checkpoint_demo.py",
      "name": "main",
      "full_name": "main",
      "lineno": 172,
      "end_lineno": 200,
      "loc": 29,
      "complexity": 5,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Demo script entry point",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.__init__": {
      "module": "src/core/user_success_metrics.py",
      "name": "__init__",
      "full_name": "UserSuccessMetrics.__init__",
      "lineno": 48,
      "end_lineno": 51,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics._init_tables": {
      "module": "src/core/user_success_metrics.py",
      "name": "_init_tables",
      "full_name": "UserSuccessMetrics._init_tables",
      "lineno": 53,
      "end_lineno": 122,
      "loc": 70,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Create metrics tables if not exists",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.start_session": {
      "module": "src/core/user_success_metrics.py",
      "name": "start_session",
      "full_name": "UserSuccessMetrics.start_session",
      "lineno": 124,
      "end_lineno": 145,
      "loc": 22,
      "complexity": 1,
      "args": [
        "self",
        "session_id",
        "user_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Start tracking a new session",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.track_upload": {
      "module": "src/core/user_success_metrics.py",
      "name": "track_upload",
      "full_name": "UserSuccessMetrics.track_upload",
      "lineno": 147,
      "end_lineno": 159,
      "loc": 13,
      "complexity": 2,
      "args": [
        "self",
        "session_id",
        "video_metadata"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Track video upload",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.track_processing": {
      "module": "src/core/user_success_metrics.py",
      "name": "track_processing",
      "full_name": "UserSuccessMetrics.track_processing",
      "lineno": 161,
      "end_lineno": 197,
      "loc": 37,
      "complexity": 3,
      "args": [
        "self",
        "session_id",
        "mode",
        "segments",
        "cost"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Track processing completion",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.track_export": {
      "module": "src/core/user_success_metrics.py",
      "name": "track_export",
      "full_name": "UserSuccessMetrics.track_export",
      "lineno": 199,
      "end_lineno": 228,
      "loc": 30,
      "complexity": 2,
      "args": [
        "self",
        "session_id",
        "segments_kept"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Track successful export",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.track_regeneration": {
      "module": "src/core/user_success_metrics.py",
      "name": "track_regeneration",
      "full_name": "UserSuccessMetrics.track_regeneration",
      "lineno": 230,
      "end_lineno": 239,
      "loc": 10,
      "complexity": 2,
      "args": [
        "self",
        "session_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Track when user regenerates (indicates dissatisfaction)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.track_abandonment": {
      "module": "src/core/user_success_metrics.py",
      "name": "track_abandonment",
      "full_name": "UserSuccessMetrics.track_abandonment",
      "lineno": 241,
      "end_lineno": 258,
      "loc": 18,
      "complexity": 2,
      "args": [
        "self",
        "session_id",
        "stage",
        "reason"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Track where users abandon the process",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.track_error": {
      "module": "src/core/user_success_metrics.py",
      "name": "track_error",
      "full_name": "UserSuccessMetrics.track_error",
      "lineno": 260,
      "end_lineno": 274,
      "loc": 15,
      "complexity": 2,
      "args": [
        "self",
        "session_id",
        "error"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Track processing errors",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.track_satisfaction": {
      "module": "src/core/user_success_metrics.py",
      "name": "track_satisfaction",
      "full_name": "UserSuccessMetrics.track_satisfaction",
      "lineno": 276,
      "end_lineno": 285,
      "loc": 10,
      "complexity": 2,
      "args": [
        "self",
        "session_id",
        "score"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Track user satisfaction (1-5 scale)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics._calculate_face_coverage": {
      "module": "src/core/user_success_metrics.py",
      "name": "_calculate_face_coverage",
      "full_name": "UserSuccessMetrics._calculate_face_coverage",
      "lineno": 287,
      "end_lineno": 301,
      "loc": 15,
      "complexity": 6,
      "args": [
        "self",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Calculate percentage of segments with good face coverage",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics._record_abandonment": {
      "module": "src/core/user_success_metrics.py",
      "name": "_record_abandonment",
      "full_name": "UserSuccessMetrics._record_abandonment",
      "lineno": 303,
      "end_lineno": 329,
      "loc": 27,
      "complexity": 5,
      "args": [
        "self",
        "stage",
        "reason"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Record abandonment patterns",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.generate_daily_report": {
      "module": "src/core/user_success_metrics.py",
      "name": "generate_daily_report",
      "full_name": "UserSuccessMetrics.generate_daily_report",
      "lineno": 331,
      "end_lineno": 386,
      "loc": 56,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Generate daily success metrics report",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics._generate_insights": {
      "module": "src/core/user_success_metrics.py",
      "name": "_generate_insights",
      "full_name": "UserSuccessMetrics._generate_insights",
      "lineno": 388,
      "end_lineno": 427,
      "loc": 40,
      "complexity": 8,
      "args": [
        "self",
        "metrics",
        "mode_dist",
        "abandonment"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Generate actionable insights from metrics",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.get_session_metrics": {
      "module": "src/core/user_success_metrics.py",
      "name": "get_session_metrics",
      "full_name": "UserSuccessMetrics.get_session_metrics",
      "lineno": 429,
      "end_lineno": 439,
      "loc": 11,
      "complexity": 3,
      "args": [
        "self",
        "session_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Get metrics for a specific session",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:UserSuccessMetrics.cleanup_old_sessions": {
      "module": "src/core/user_success_metrics.py",
      "name": "cleanup_old_sessions",
      "full_name": "UserSuccessMetrics.cleanup_old_sessions",
      "lineno": 441,
      "end_lineno": 453,
      "loc": 13,
      "complexity": 4,
      "args": [
        "self",
        "hours"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "UserSuccessMetrics",
      "docstring": "Clean up old sessions from memory",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/user_success_metrics.py:demo_metrics": {
      "module": "src/core/user_success_metrics.py",
      "name": "demo_metrics",
      "full_name": "demo_metrics",
      "lineno": 460,
      "end_lineno": 503,
      "loc": 44,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Demonstrate metrics tracking",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.__new__": {
      "module": "src/core/metrics.py",
      "name": "__new__",
      "full_name": "MetricsManager.__new__",
      "lineno": 25,
      "end_lineno": 31,
      "loc": 7,
      "complexity": 3,
      "args": [
        "cls"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.__init__": {
      "module": "src/core/metrics.py",
      "name": "__init__",
      "full_name": "MetricsManager.__init__",
      "lineno": 33,
      "end_lineno": 163,
      "loc": 131,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.start_http_server": {
      "module": "src/core/metrics.py",
      "name": "start_http_server",
      "full_name": "MetricsManager.start_http_server",
      "lineno": 165,
      "end_lineno": 179,
      "loc": 15,
      "complexity": 4,
      "args": [
        "self",
        "port"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Start Prometheus HTTP server",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.increment_job": {
      "module": "src/core/metrics.py",
      "name": "increment_job",
      "full_name": "MetricsManager.increment_job",
      "lineno": 181,
      "end_lineno": 183,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "status"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Increment job counter",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.track_cost": {
      "module": "src/core/metrics.py",
      "name": "track_cost",
      "full_name": "MetricsManager.track_cost",
      "lineno": 185,
      "end_lineno": 188,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self",
        "api_name",
        "cost_usd",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Track API cost",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.track_audio_spread": {
      "module": "src/core/metrics.py",
      "name": "track_audio_spread",
      "full_name": "MetricsManager.track_audio_spread",
      "lineno": 190,
      "end_lineno": 192,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "spread_lu"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Track audio loudness spread",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.track_processing_time": {
      "module": "src/core/metrics.py",
      "name": "track_processing_time",
      "full_name": "MetricsManager.track_processing_time",
      "lineno": 195,
      "end_lineno": 207,
      "loc": 13,
      "complexity": 3,
      "args": [
        "self",
        "stage",
        "video_duration"
      ],
      "decorators": [
        "contextmanager"
      ],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Context manager to track processing time",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.track_job_progress": {
      "module": "src/core/metrics.py",
      "name": "track_job_progress",
      "full_name": "MetricsManager.track_job_progress",
      "lineno": 210,
      "end_lineno": 216,
      "loc": 7,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "contextmanager"
      ],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Context manager to track jobs in progress",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.track_error": {
      "module": "src/core/metrics.py",
      "name": "track_error",
      "full_name": "MetricsManager.track_error",
      "lineno": 218,
      "end_lineno": 220,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "stage",
        "error_type"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Track errors",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.set_budget_remaining": {
      "module": "src/core/metrics.py",
      "name": "set_budget_remaining",
      "full_name": "MetricsManager.set_budget_remaining",
      "lineno": 222,
      "end_lineno": 227,
      "loc": 6,
      "complexity": 2,
      "args": [
        "self",
        "job_id",
        "remaining_usd"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Set remaining budget for a job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.track_api_call": {
      "module": "src/core/metrics.py",
      "name": "track_api_call",
      "full_name": "MetricsManager.track_api_call",
      "lineno": 229,
      "end_lineno": 231,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "api_name",
        "status"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Track API call",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.track_rate_limit_backoff": {
      "module": "src/core/metrics.py",
      "name": "track_rate_limit_backoff",
      "full_name": "MetricsManager.track_rate_limit_backoff",
      "lineno": 233,
      "end_lineno": 235,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "api_name",
        "backoff_seconds"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Track rate limit backoff time",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.set_ffmpeg_processes": {
      "module": "src/core/metrics.py",
      "name": "set_ffmpeg_processes",
      "full_name": "MetricsManager.set_ffmpeg_processes",
      "lineno": 237,
      "end_lineno": 239,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "count"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Set number of active FFmpeg processes",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.set_database_connections": {
      "module": "src/core/metrics.py",
      "name": "set_database_connections",
      "full_name": "MetricsManager.set_database_connections",
      "lineno": 241,
      "end_lineno": 243,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "active"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Set number of active database connections",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.set_redis_connections": {
      "module": "src/core/metrics.py",
      "name": "set_redis_connections",
      "full_name": "MetricsManager.set_redis_connections",
      "lineno": 245,
      "end_lineno": 247,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "active"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Set number of active Redis connections",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.track_segments_detected": {
      "module": "src/core/metrics.py",
      "name": "track_segments_detected",
      "full_name": "MetricsManager.track_segments_detected",
      "lineno": 249,
      "end_lineno": 251,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "count"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Track number of segments detected",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.track_highlight_score": {
      "module": "src/core/metrics.py",
      "name": "track_highlight_score",
      "full_name": "MetricsManager.track_highlight_score",
      "lineno": 253,
      "end_lineno": 255,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "score"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Track highlight score distribution",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsManager.track_audio_normalization": {
      "module": "src/core/metrics.py",
      "name": "track_audio_normalization",
      "full_name": "MetricsManager.track_audio_normalization",
      "lineno": 257,
      "end_lineno": 259,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "adjustment_db"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsManager",
      "docstring": "Track audio normalization adjustments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:track_processing_stage": {
      "module": "src/core/metrics.py",
      "name": "track_processing_stage",
      "full_name": "track_processing_stage",
      "lineno": 268,
      "end_lineno": 285,
      "loc": 18,
      "complexity": 1,
      "args": [
        "stage"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Decorator to track processing time for a stage",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:track_api_cost": {
      "module": "src/core/metrics.py",
      "name": "track_api_cost",
      "full_name": "track_api_cost",
      "lineno": 288,
      "end_lineno": 314,
      "loc": 27,
      "complexity": 1,
      "args": [
        "api_name",
        "cost_calculator"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Decorator to track API costs",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:with_job_tracking": {
      "module": "src/core/metrics.py",
      "name": "with_job_tracking",
      "full_name": "with_job_tracking",
      "lineno": 317,
      "end_lineno": 331,
      "loc": 15,
      "complexity": 1,
      "args": [
        "func"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Decorator to track job execution",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:update_system_metrics": {
      "module": "src/core/metrics.py",
      "name": "update_system_metrics",
      "full_name": "update_system_metrics",
      "lineno": 336,
      "end_lineno": 349,
      "loc": 14,
      "complexity": 4,
      "args": [
        "db_pool",
        "redis_client"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Update system resource metrics",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:track_ffmpeg_process_start": {
      "module": "src/core/metrics.py",
      "name": "track_ffmpeg_process_start",
      "full_name": "track_ffmpeg_process_start",
      "lineno": 352,
      "end_lineno": 355,
      "loc": 4,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Track FFmpeg process start",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:track_ffmpeg_process_end": {
      "module": "src/core/metrics.py",
      "name": "track_ffmpeg_process_end",
      "full_name": "track_ffmpeg_process_end",
      "lineno": 358,
      "end_lineno": 361,
      "loc": 4,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Track FFmpeg process end",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsExample.validate_input": {
      "module": "src/core/metrics.py",
      "name": "validate_input",
      "full_name": "MetricsExample.validate_input",
      "lineno": 369,
      "end_lineno": 372,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "input_path",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsExample",
      "docstring": "Example validation with metrics",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsExample.analyze_video": {
      "module": "src/core/metrics.py",
      "name": "analyze_video",
      "full_name": "MetricsExample.analyze_video",
      "lineno": 375,
      "end_lineno": 385,
      "loc": 11,
      "complexity": 2,
      "args": [
        "self",
        "job_id",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsExample",
      "docstring": "Example analysis with metrics",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/metrics.py:MetricsExample.call_openai_api": {
      "module": "src/core/metrics.py",
      "name": "call_openai_api",
      "full_name": "MetricsExample.call_openai_api",
      "lineno": 388,
      "end_lineno": 391,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "prompt"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MetricsExample",
      "docstring": "Example API call with cost tracking",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:DatabasePool.__init__": {
      "module": "src/core/db.py",
      "name": "__init__",
      "full_name": "DatabasePool.__init__",
      "lineno": 32,
      "end_lineno": 34,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DatabasePool",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:DatabasePool._validate_table_name": {
      "module": "src/core/db.py",
      "name": "_validate_table_name",
      "full_name": "DatabasePool._validate_table_name",
      "lineno": 36,
      "end_lineno": 40,
      "loc": 5,
      "complexity": 2,
      "args": [
        "self",
        "table"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DatabasePool",
      "docstring": "Validate table name against whitelist",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:DatabasePool._validate_column_name": {
      "module": "src/core/db.py",
      "name": "_validate_column_name",
      "full_name": "DatabasePool._validate_column_name",
      "lineno": 42,
      "end_lineno": 44,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "column"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DatabasePool",
      "docstring": "Validate column name to prevent injection",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:DatabasePool._init_pool": {
      "module": "src/core/db.py",
      "name": "_init_pool",
      "full_name": "DatabasePool._init_pool",
      "lineno": 46,
      "end_lineno": 62,
      "loc": 17,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DatabasePool",
      "docstring": "Initialize connection pool",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:DatabasePool.get_connection": {
      "module": "src/core/db.py",
      "name": "get_connection",
      "full_name": "DatabasePool.get_connection",
      "lineno": 65,
      "end_lineno": 73,
      "loc": 9,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [
        "contextmanager"
      ],
      "is_method": true,
      "class_name": "DatabasePool",
      "docstring": "Get a connection from pool",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:DatabasePool.get_cursor": {
      "module": "src/core/db.py",
      "name": "get_cursor",
      "full_name": "DatabasePool.get_cursor",
      "lineno": 76,
      "end_lineno": 88,
      "loc": 13,
      "complexity": 3,
      "args": [
        "self",
        "commit"
      ],
      "decorators": [
        "contextmanager"
      ],
      "is_method": true,
      "class_name": "DatabasePool",
      "docstring": "Get a cursor with automatic commit/rollback",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:DatabasePool.close": {
      "module": "src/core/db.py",
      "name": "close",
      "full_name": "DatabasePool.close",
      "lineno": 90,
      "end_lineno": 94,
      "loc": 5,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DatabasePool",
      "docstring": "Close all connections in pool",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:SecureDatabase.__init__": {
      "module": "src/core/db.py",
      "name": "__init__",
      "full_name": "SecureDatabase.__init__",
      "lineno": 104,
      "end_lineno": 105,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SecureDatabase",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:SecureDatabase.execute": {
      "module": "src/core/db.py",
      "name": "execute",
      "full_name": "SecureDatabase.execute",
      "lineno": 107,
      "end_lineno": 113,
      "loc": 7,
      "complexity": 2,
      "args": [
        "self",
        "query",
        "params",
        "commit"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SecureDatabase",
      "docstring": "Execute a query and return results",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:SecureDatabase.execute_many": {
      "module": "src/core/db.py",
      "name": "execute_many",
      "full_name": "SecureDatabase.execute_many",
      "lineno": 115,
      "end_lineno": 118,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self",
        "query",
        "params_list",
        "commit"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SecureDatabase",
      "docstring": "Execute a query multiple times with different parameters",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:SecureDatabase.insert": {
      "module": "src/core/db.py",
      "name": "insert",
      "full_name": "SecureDatabase.insert",
      "lineno": 120,
      "end_lineno": 148,
      "loc": 29,
      "complexity": 9,
      "args": [
        "self",
        "table",
        "data",
        "returning"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SecureDatabase",
      "docstring": "Insert a record and return specified column",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:SecureDatabase.update": {
      "module": "src/core/db.py",
      "name": "update",
      "full_name": "SecureDatabase.update",
      "lineno": 150,
      "end_lineno": 169,
      "loc": 20,
      "complexity": 6,
      "args": [
        "self",
        "table",
        "data",
        "where"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SecureDatabase",
      "docstring": "Update records and return affected row count",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:SecureDatabase.find_one": {
      "module": "src/core/db.py",
      "name": "find_one",
      "full_name": "SecureDatabase.find_one",
      "lineno": 171,
      "end_lineno": 193,
      "loc": 23,
      "complexity": 7,
      "args": [
        "self",
        "table",
        "where"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SecureDatabase",
      "docstring": "Find a single record",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:SecureDatabase.find_many": {
      "module": "src/core/db.py",
      "name": "find_many",
      "full_name": "SecureDatabase.find_many",
      "lineno": 195,
      "end_lineno": 226,
      "loc": 32,
      "complexity": 12,
      "args": [
        "self",
        "table",
        "where",
        "order_by",
        "limit"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SecureDatabase",
      "docstring": "Find multiple records",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:SecureDatabase.delete": {
      "module": "src/core/db.py",
      "name": "delete",
      "full_name": "SecureDatabase.delete",
      "lineno": 228,
      "end_lineno": 247,
      "loc": 20,
      "complexity": 6,
      "args": [
        "self",
        "table",
        "where"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SecureDatabase",
      "docstring": "Delete records and return affected row count",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:SecureDatabase.count": {
      "module": "src/core/db.py",
      "name": "count",
      "full_name": "SecureDatabase.count",
      "lineno": 249,
      "end_lineno": 269,
      "loc": 21,
      "complexity": 7,
      "args": [
        "self",
        "table",
        "where"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SecureDatabase",
      "docstring": "Count records in table",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/db.py:SecureDatabase.transaction": {
      "module": "src/core/db.py",
      "name": "transaction",
      "full_name": "SecureDatabase.transaction",
      "lineno": 272,
      "end_lineno": 283,
      "loc": 12,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [
        "contextmanager"
      ],
      "is_method": true,
      "class_name": "SecureDatabase",
      "docstring": "Execute multiple operations in a transaction",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/smart_video_editor.py:SmartVideoEditor.__init__": {
      "module": "src/core/smart_video_editor.py",
      "name": "__init__",
      "full_name": "SmartVideoEditor.__init__",
      "lineno": 35,
      "end_lineno": 48,
      "loc": 14,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditor",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "gpu",
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/smart_video_editor.py:SmartVideoEditor.process_job": {
      "module": "src/core/smart_video_editor.py",
      "name": "process_job",
      "full_name": "SmartVideoEditor.process_job",
      "lineno": 51,
      "end_lineno": 82,
      "loc": 32,
      "complexity": 3,
      "args": [
        "self",
        "job_id",
        "input_path",
        "highlights"
      ],
      "decorators": [
        "with_job_tracking"
      ],
      "is_method": true,
      "class_name": "SmartVideoEditor",
      "docstring": "Process a complete video job with all safety checks and optimizations.\n\nArgs:\n    job_id: Unique job identifier\n    input_path: Path to input video\n    highlights: List of highlight segments to extract\n    \nReturns:\n    Processing results including output path",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/smart_video_editor.py:SmartVideoEditor._full_processing_pipeline": {
      "module": "src/core/smart_video_editor.py",
      "name": "_full_processing_pipeline",
      "full_name": "SmartVideoEditor._full_processing_pipeline",
      "lineno": 84,
      "end_lineno": 143,
      "loc": 60,
      "complexity": 6,
      "args": [
        "self",
        "job_id",
        "input_path",
        "highlights"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditor",
      "docstring": "Execute full processing pipeline with checkpoints",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/smart_video_editor.py:SmartVideoEditor._validate_input": {
      "module": "src/core/smart_video_editor.py",
      "name": "_validate_input",
      "full_name": "SmartVideoEditor._validate_input",
      "lineno": 146,
      "end_lineno": 164,
      "loc": 19,
      "complexity": 3,
      "args": [
        "self",
        "job_id",
        "input_path",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditor",
      "docstring": "Validate input video (includes HDR rejection)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/smart_video_editor.py:SmartVideoEditor._analyze_segments": {
      "module": "src/core/smart_video_editor.py",
      "name": "_analyze_segments",
      "full_name": "SmartVideoEditor._analyze_segments",
      "lineno": 167,
      "end_lineno": 182,
      "loc": 16,
      "complexity": 4,
      "args": [
        "self",
        "job_id",
        "highlights",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditor",
      "docstring": "Analyze and prepare segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/smart_video_editor.py:SmartVideoEditor._edit_video_with_color_safety": {
      "module": "src/core/smart_video_editor.py",
      "name": "_edit_video_with_color_safety",
      "full_name": "SmartVideoEditor._edit_video_with_color_safety",
      "lineno": 185,
      "end_lineno": 227,
      "loc": 43,
      "complexity": 2,
      "args": [
        "self",
        "job_id",
        "input_path",
        "segments",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditor",
      "docstring": "Edit video with color space safety",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/smart_video_editor.py:SmartVideoEditor._normalize_audio": {
      "module": "src/core/smart_video_editor.py",
      "name": "_normalize_audio",
      "full_name": "SmartVideoEditor._normalize_audio",
      "lineno": 230,
      "end_lineno": 260,
      "loc": 31,
      "complexity": 2,
      "args": [
        "self",
        "job_id",
        "input_path",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditor",
      "docstring": "Apply two-pass audio normalization",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/smart_video_editor.py:SmartVideoEditor._verify_final_output": {
      "module": "src/core/smart_video_editor.py",
      "name": "_verify_final_output",
      "full_name": "SmartVideoEditor._verify_final_output",
      "lineno": 262,
      "end_lineno": 281,
      "loc": 20,
      "complexity": 2,
      "args": [
        "self",
        "job_id",
        "output_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditor",
      "docstring": "Verify final output meets all requirements",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/smart_video_editor.py:SmartVideoEditor._resume_processing": {
      "module": "src/core/smart_video_editor.py",
      "name": "_resume_processing",
      "full_name": "SmartVideoEditor._resume_processing",
      "lineno": 283,
      "end_lineno": 290,
      "loc": 8,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "input_path",
        "highlights",
        "resume_info"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditor",
      "docstring": "Resume processing from checkpoint",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/smart_video_editor.py:example_usage": {
      "module": "src/core/smart_video_editor.py",
      "name": "example_usage",
      "full_name": "example_usage",
      "lineno": 294,
      "end_lineno": 329,
      "loc": 36,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Example of using SmartVideoEditor",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager.__init__": {
      "module": "src/core/checkpoint.py",
      "name": "__init__",
      "full_name": "CheckpointManager.__init__",
      "lineno": 26,
      "end_lineno": 45,
      "loc": 20,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager._get_checkpoint_key": {
      "module": "src/core/checkpoint.py",
      "name": "_get_checkpoint_key",
      "full_name": "CheckpointManager._get_checkpoint_key",
      "lineno": 47,
      "end_lineno": 49,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "stage"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Generate Redis key for a checkpoint",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager._get_job_stages_key": {
      "module": "src/core/checkpoint.py",
      "name": "_get_job_stages_key",
      "full_name": "CheckpointManager._get_job_stages_key",
      "lineno": 51,
      "end_lineno": 53,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Generate Redis key for job stages list",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager.save_checkpoint": {
      "module": "src/core/checkpoint.py",
      "name": "save_checkpoint",
      "full_name": "CheckpointManager.save_checkpoint",
      "lineno": 55,
      "end_lineno": 94,
      "loc": 40,
      "complexity": 2,
      "args": [
        "self",
        "job_id",
        "stage",
        "data"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Save a checkpoint for a job stage",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager.load_checkpoint": {
      "module": "src/core/checkpoint.py",
      "name": "load_checkpoint",
      "full_name": "CheckpointManager.load_checkpoint",
      "lineno": 96,
      "end_lineno": 112,
      "loc": 17,
      "complexity": 3,
      "args": [
        "self",
        "job_id",
        "stage"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Load a checkpoint for a job stage",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager._restore_from_postgres": {
      "module": "src/core/checkpoint.py",
      "name": "_restore_from_postgres",
      "full_name": "CheckpointManager._restore_from_postgres",
      "lineno": 114,
      "end_lineno": 132,
      "loc": 19,
      "complexity": 3,
      "args": [
        "self",
        "job_id",
        "stage"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Restore checkpoint from PostgreSQL if not in Redis",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager.get_last_successful_stage": {
      "module": "src/core/checkpoint.py",
      "name": "get_last_successful_stage",
      "full_name": "CheckpointManager.get_last_successful_stage",
      "lineno": 134,
      "end_lineno": 175,
      "loc": 42,
      "complexity": 9,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Get the last successfully completed stage for a job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager.delete_job_checkpoints": {
      "module": "src/core/checkpoint.py",
      "name": "delete_job_checkpoints",
      "full_name": "CheckpointManager.delete_job_checkpoints",
      "lineno": 177,
      "end_lineno": 196,
      "loc": 20,
      "complexity": 4,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Delete all checkpoints for a job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager.exists": {
      "module": "src/core/checkpoint.py",
      "name": "exists",
      "full_name": "CheckpointManager.exists",
      "lineno": 198,
      "end_lineno": 201,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "stage"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Check if a checkpoint exists",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager.atomic_checkpoint": {
      "module": "src/core/checkpoint.py",
      "name": "atomic_checkpoint",
      "full_name": "CheckpointManager.atomic_checkpoint",
      "lineno": 204,
      "end_lineno": 218,
      "loc": 15,
      "complexity": 2,
      "args": [
        "self",
        "job_id",
        "stage"
      ],
      "decorators": [
        "contextmanager"
      ],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Context manager for atomic checkpoint operations",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager.get_job_progress": {
      "module": "src/core/checkpoint.py",
      "name": "get_job_progress",
      "full_name": "CheckpointManager.get_job_progress",
      "lineno": 220,
      "end_lineno": 247,
      "loc": 28,
      "complexity": 6,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Get detailed progress information for a job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:CheckpointManager.health_check": {
      "module": "src/core/checkpoint.py",
      "name": "health_check",
      "full_name": "CheckpointManager.health_check",
      "lineno": 249,
      "end_lineno": 254,
      "loc": 6,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CheckpointManager",
      "docstring": "Check Redis connection health",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:SmartVideoEditorCheckpoint.__init__": {
      "module": "src/core/checkpoint.py",
      "name": "__init__",
      "full_name": "SmartVideoEditorCheckpoint.__init__",
      "lineno": 260,
      "end_lineno": 261,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "checkpoint_manager"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditorCheckpoint",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:SmartVideoEditorCheckpoint.save_stage_data": {
      "module": "src/core/checkpoint.py",
      "name": "save_stage_data",
      "full_name": "SmartVideoEditorCheckpoint.save_stage_data",
      "lineno": 263,
      "end_lineno": 265,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "stage"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditorCheckpoint",
      "docstring": "Save stage-specific data",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:SmartVideoEditorCheckpoint.load_stage_data": {
      "module": "src/core/checkpoint.py",
      "name": "load_stage_data",
      "full_name": "SmartVideoEditorCheckpoint.load_stage_data",
      "lineno": 267,
      "end_lineno": 269,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "stage"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditorCheckpoint",
      "docstring": "Load stage-specific data",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:SmartVideoEditorCheckpoint.should_skip_stage": {
      "module": "src/core/checkpoint.py",
      "name": "should_skip_stage",
      "full_name": "SmartVideoEditorCheckpoint.should_skip_stage",
      "lineno": 271,
      "end_lineno": 273,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "job_id",
        "stage"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditorCheckpoint",
      "docstring": "Check if a stage should be skipped based on checkpoints",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:SmartVideoEditorCheckpoint.get_resume_point": {
      "module": "src/core/checkpoint.py",
      "name": "get_resume_point",
      "full_name": "SmartVideoEditorCheckpoint.get_resume_point",
      "lineno": 275,
      "end_lineno": 305,
      "loc": 31,
      "complexity": 3,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartVideoEditorCheckpoint",
      "docstring": "Get the point from which to resume processing",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/checkpoint.py:example_usage": {
      "module": "src/core/checkpoint.py",
      "name": "example_usage",
      "full_name": "example_usage",
      "lineno": 309,
      "end_lineno": 349,
      "loc": 41,
      "complexity": 3,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Example of how to use checkpointing in SmartVideoEditor",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "gpu"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/highlight_selector.py:get_audio_energy": {
      "module": "src/core/highlight_selector.py",
      "name": "get_audio_energy",
      "full_name": "get_audio_energy",
      "lineno": 22,
      "end_lineno": 45,
      "loc": 24,
      "complexity": 3,
      "args": [
        "video_path",
        "start_time",
        "duration"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get audio energy/volume for a segment",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/highlight_selector.py:local_rule_scorer": {
      "module": "src/core/highlight_selector.py",
      "name": "local_rule_scorer",
      "full_name": "local_rule_scorer",
      "lineno": 48,
      "end_lineno": 147,
      "loc": 100,
      "complexity": 12,
      "args": [
        "words",
        "audio_energy"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Local rule-based scoring (token-free)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/highlight_selector.py:get_audio_energy_at_time": {
      "module": "src/core/highlight_selector.py",
      "name": "get_audio_energy_at_time",
      "full_name": "get_audio_energy_at_time",
      "lineno": 150,
      "end_lineno": 157,
      "loc": 8,
      "complexity": 2,
      "args": [
        "energy_data",
        "time"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get audio energy at specific time",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/highlight_selector.py:chunk_transcript_for_ai": {
      "module": "src/core/highlight_selector.py",
      "name": "chunk_transcript_for_ai",
      "full_name": "chunk_transcript_for_ai",
      "lineno": 160,
      "end_lineno": 187,
      "loc": 28,
      "complexity": 5,
      "args": [
        "transcript",
        "max_tokens"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Chunk transcript into manageable pieces for AI analysis",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/highlight_selector.py:analyze_with_claude": {
      "module": "src/core/highlight_selector.py",
      "name": "analyze_with_claude",
      "full_name": "analyze_with_claude",
      "lineno": 191,
      "end_lineno": 244,
      "loc": 54,
      "complexity": 6,
      "args": [
        "text"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "REAL Claude analysis with cost tracking",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/highlight_selector.py:analyze_with_gpt": {
      "module": "src/core/highlight_selector.py",
      "name": "analyze_with_gpt",
      "full_name": "analyze_with_gpt",
      "lineno": 248,
      "end_lineno": 306,
      "loc": 59,
      "complexity": 5,
      "args": [
        "text"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "REAL GPT-4 analysis with cost tracking",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/highlight_selector.py:merge_ai_with_local": {
      "module": "src/core/highlight_selector.py",
      "name": "merge_ai_with_local",
      "full_name": "merge_ai_with_local",
      "lineno": 309,
      "end_lineno": 337,
      "loc": 29,
      "complexity": 6,
      "args": [
        "local_segments",
        "ai_results"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Merge AI analysis with local rule-based scoring",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/highlight_selector.py:choose_highlights": {
      "module": "src/core/highlight_selector.py",
      "name": "choose_highlights",
      "full_name": "choose_highlights",
      "lineno": 340,
      "end_lineno": 459,
      "loc": 120,
      "complexity": 15,
      "args": [
        "words",
        "audio_energy",
        "mode"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Main highlight selection function\nmode: \"smart\" (local only) or \"premium\" (local + AI)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/highlight_selector.py:get_total_cost": {
      "module": "src/core/highlight_selector.py",
      "name": "get_total_cost",
      "full_name": "get_total_cost",
      "lineno": 462,
      "end_lineno": 464,
      "loc": 3,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get total API cost spent",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/adaptive_quality_pipeline_master.py:AdaptiveQualityPipeline.__init__": {
      "module": "src/core/adaptive_quality_pipeline_master.py",
      "name": "__init__",
      "full_name": "AdaptiveQualityPipeline.__init__",
      "lineno": 116,
      "end_lineno": 134,
      "loc": 19,
      "complexity": 1,
      "args": [
        "self",
        "config"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AdaptiveQualityPipeline",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/adaptive_quality_pipeline_master.py:AdaptiveQualityPipeline._setup_directories": {
      "module": "src/core/adaptive_quality_pipeline_master.py",
      "name": "_setup_directories",
      "full_name": "AdaptiveQualityPipeline._setup_directories",
      "lineno": 136,
      "end_lineno": 147,
      "loc": 12,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AdaptiveQualityPipeline",
      "docstring": "Create necessary directories",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/adaptive_quality_pipeline_master.py:AdaptiveQualityPipeline._extract_audio": {
      "module": "src/core/adaptive_quality_pipeline_master.py",
      "name": "_extract_audio",
      "full_name": "AdaptiveQualityPipeline._extract_audio",
      "lineno": 149,
      "end_lineno": 180,
      "loc": 32,
      "complexity": 4,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AdaptiveQualityPipeline",
      "docstring": "Extract audio from video for ASR processing",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/adaptive_quality_pipeline_master.py:AdaptiveQualityPipeline.phase1_ai_processing": {
      "module": "src/core/adaptive_quality_pipeline_master.py",
      "name": "phase1_ai_processing",
      "full_name": "AdaptiveQualityPipeline.phase1_ai_processing",
      "lineno": 182,
      "end_lineno": 356,
      "loc": 175,
      "complexity": 6,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AdaptiveQualityPipeline",
      "docstring": "Phase 1: Complete AI processing pipeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/adaptive_quality_pipeline_master.py:AdaptiveQualityPipeline.phase2_video_editing": {
      "module": "src/core/adaptive_quality_pipeline_master.py",
      "name": "phase2_video_editing",
      "full_name": "AdaptiveQualityPipeline.phase2_video_editing",
      "lineno": 358,
      "end_lineno": 409,
      "loc": 52,
      "complexity": 5,
      "args": [
        "self",
        "video_path",
        "highlights",
        "subtitles_dir"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AdaptiveQualityPipeline",
      "docstring": "Phase 2: DaVinci Resolve video editing",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/adaptive_quality_pipeline_master.py:AdaptiveQualityPipeline.phase3_quality_control": {
      "module": "src/core/adaptive_quality_pipeline_master.py",
      "name": "phase3_quality_control",
      "full_name": "AdaptiveQualityPipeline.phase3_quality_control",
      "lineno": 411,
      "end_lineno": 495,
      "loc": 85,
      "complexity": 4,
      "args": [
        "self",
        "video_path",
        "highlights",
        "subtitles_dir"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AdaptiveQualityPipeline",
      "docstring": "Phase 3: Quality control and approval",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/adaptive_quality_pipeline_master.py:AdaptiveQualityPipeline.phase4_finalize_and_report": {
      "module": "src/core/adaptive_quality_pipeline_master.py",
      "name": "phase4_finalize_and_report",
      "full_name": "AdaptiveQualityPipeline.phase4_finalize_and_report",
      "lineno": 497,
      "end_lineno": 577,
      "loc": 81,
      "complexity": 6,
      "args": [
        "self",
        "results"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AdaptiveQualityPipeline",
      "docstring": "Phase 4: Finalize and generate reports",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/adaptive_quality_pipeline_master.py:AdaptiveQualityPipeline.execute": {
      "module": "src/core/adaptive_quality_pipeline_master.py",
      "name": "execute",
      "full_name": "AdaptiveQualityPipeline.execute",
      "lineno": 579,
      "end_lineno": 646,
      "loc": 68,
      "complexity": 7,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AdaptiveQualityPipeline",
      "docstring": "Execute complete adaptive quality pipeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/adaptive_quality_pipeline_master.py:main": {
      "module": "src/core/adaptive_quality_pipeline_master.py",
      "name": "main",
      "full_name": "main",
      "lineno": 648,
      "end_lineno": 714,
      "loc": 67,
      "complexity": 6,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Main entry point",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/fallback_selector.py:analyze_with_fallback": {
      "module": "src/core/fallback_selector.py",
      "name": "analyze_with_fallback",
      "full_name": "analyze_with_fallback",
      "lineno": 9,
      "end_lineno": 72,
      "loc": 64,
      "complexity": 9,
      "args": [
        "text",
        "word_timings"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Fallback analysis when APIs are unavailable",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/errors.py:MontageError.__init__": {
      "module": "src/core/errors.py",
      "name": "__init__",
      "full_name": "MontageError.__init__",
      "lineno": 12,
      "end_lineno": 15,
      "loc": 4,
      "complexity": 2,
      "args": [
        "self",
        "message",
        "details"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MontageError",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/errors.py:MontageError.__str__": {
      "module": "src/core/errors.py",
      "name": "__str__",
      "full_name": "MontageError.__str__",
      "lineno": 17,
      "end_lineno": 20,
      "loc": 4,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MontageError",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/errors.py:BudgetExceededError.__init__": {
      "module": "src/core/errors.py",
      "name": "__init__",
      "full_name": "BudgetExceededError.__init__",
      "lineno": 62,
      "end_lineno": 68,
      "loc": 7,
      "complexity": 1,
      "args": [
        "self",
        "spent",
        "limit",
        "details"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetExceededError",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/errors.py:ExternalServiceError.__init__": {
      "module": "src/core/errors.py",
      "name": "__init__",
      "full_name": "ExternalServiceError.__init__",
      "lineno": 74,
      "end_lineno": 78,
      "loc": 5,
      "complexity": 1,
      "args": [
        "self",
        "service",
        "message",
        "details"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ExternalServiceError",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/errors.py:OpenAIError.__init__": {
      "module": "src/core/errors.py",
      "name": "__init__",
      "full_name": "OpenAIError.__init__",
      "lineno": 84,
      "end_lineno": 85,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "message",
        "details"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "OpenAIError",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/errors.py:AnthropicError.__init__": {
      "module": "src/core/errors.py",
      "name": "__init__",
      "full_name": "AnthropicError.__init__",
      "lineno": 91,
      "end_lineno": 92,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "message",
        "details"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AnthropicError",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/errors.py:DeepgramError.__init__": {
      "module": "src/core/errors.py",
      "name": "__init__",
      "full_name": "DeepgramError.__init__",
      "lineno": 98,
      "end_lineno": 99,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "message",
        "details"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "DeepgramError",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/errors.py:FileSystemError.__init__": {
      "module": "src/core/errors.py",
      "name": "__init__",
      "full_name": "FileSystemError.__init__",
      "lineno": 111,
      "end_lineno": 117,
      "loc": 7,
      "complexity": 1,
      "args": [
        "self",
        "path",
        "operation",
        "details"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FileSystemError",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/errors.py:handle_error": {
      "module": "src/core/errors.py",
      "name": "handle_error",
      "full_name": "handle_error",
      "lineno": 127,
      "end_lineno": 161,
      "loc": 35,
      "complexity": 9,
      "args": [
        "error",
        "context"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Convert generic exceptions to MontageError hierarchy\n\nArgs:\n    error: The original exception\n    context: Additional context about where the error occurred\n\nReturns:\n    MontageError subclass instance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:sha256_file": {
      "module": "src/core/analyze_video.py",
      "name": "sha256_file",
      "full_name": "sha256_file",
      "lineno": 25,
      "end_lineno": 31,
      "loc": 7,
      "complexity": 2,
      "args": [
        "path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Calculate SHA256 hash of file for caching",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:extract_audio_to_wav": {
      "module": "src/core/analyze_video.py",
      "name": "extract_audio_to_wav",
      "full_name": "extract_audio_to_wav",
      "lineno": 34,
      "end_lineno": 50,
      "loc": 17,
      "complexity": 3,
      "args": [
        "video_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Extract audio from video to WAV format",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:transcribe_faster_whisper": {
      "module": "src/core/analyze_video.py",
      "name": "transcribe_faster_whisper",
      "full_name": "transcribe_faster_whisper",
      "lineno": 53,
      "end_lineno": 94,
      "loc": 42,
      "complexity": 8,
      "args": [
        "wav_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "REAL faster-whisper transcription",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:transcribe_deepgram": {
      "module": "src/core/analyze_video.py",
      "name": "transcribe_deepgram",
      "full_name": "transcribe_deepgram",
      "lineno": 98,
      "end_lineno": 151,
      "loc": 54,
      "complexity": 13,
      "args": [
        "wav_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "REAL Deepgram transcription with cost tracking",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file",
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:rover_merge": {
      "module": "src/core/analyze_video.py",
      "name": "rover_merge",
      "full_name": "rover_merge",
      "lineno": 154,
      "end_lineno": 197,
      "loc": 44,
      "complexity": 12,
      "args": [
        "fw_words",
        "dg_words"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "ROVER merge algorithm for combining transcriptions",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:diarize": {
      "module": "src/core/analyze_video.py",
      "name": "diarize",
      "full_name": "diarize",
      "lineno": 200,
      "end_lineno": 219,
      "loc": 20,
      "complexity": 3,
      "args": [
        "audio_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "REAL speaker diarization using pyannote",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:simple_speaker_segments": {
      "module": "src/core/analyze_video.py",
      "name": "simple_speaker_segments",
      "full_name": "simple_speaker_segments",
      "lineno": 222,
      "end_lineno": 251,
      "loc": 30,
      "complexity": 3,
      "args": [
        "audio_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Fallback speaker segmentation based on audio energy",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:align_speakers": {
      "module": "src/core/analyze_video.py",
      "name": "align_speakers",
      "full_name": "align_speakers",
      "lineno": 254,
      "end_lineno": 272,
      "loc": 19,
      "complexity": 7,
      "args": [
        "words",
        "turns"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Align speaker turns with word timestamps",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:get_cached_transcript": {
      "module": "src/core/analyze_video.py",
      "name": "get_cached_transcript",
      "full_name": "get_cached_transcript",
      "lineno": 275,
      "end_lineno": 296,
      "loc": 22,
      "complexity": 3,
      "args": [
        "file_hash"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get cached transcript from database",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:cache_transcript": {
      "module": "src/core/analyze_video.py",
      "name": "cache_transcript",
      "full_name": "cache_transcript",
      "lineno": 299,
      "end_lineno": 317,
      "loc": 19,
      "complexity": 2,
      "args": [
        "file_hash",
        "transcript"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Cache transcript in database",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/core/analyze_video.py:analyze_video": {
      "module": "src/core/analyze_video.py",
      "name": "analyze_video",
      "full_name": "analyze_video",
      "lineno": 320,
      "end_lineno": 378,
      "loc": 59,
      "complexity": 4,
      "args": [
        "video_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Main video analysis function - REAL implementation\nReturns: {\"sha\": str, \"words\": [...], \"transcript\": str}",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file",
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:ResolveManager.__init__": {
      "module": "src/providers/resolve_mcp.py",
      "name": "__init__",
      "full_name": "ResolveManager.__init__",
      "lineno": 39,
      "end_lineno": 47,
      "loc": 9,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ResolveManager",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:ResolveManager.connect": {
      "module": "src/providers/resolve_mcp.py",
      "name": "connect",
      "full_name": "ResolveManager.connect",
      "lineno": 49,
      "end_lineno": 66,
      "loc": 18,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ResolveManager",
      "docstring": "Connect to DaVinci Resolve",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:ResolveManager.create_project": {
      "module": "src/providers/resolve_mcp.py",
      "name": "create_project",
      "full_name": "ResolveManager.create_project",
      "lineno": 68,
      "end_lineno": 81,
      "loc": 14,
      "complexity": 4,
      "args": [
        "self",
        "name"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ResolveManager",
      "docstring": "Create new project",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:ResolveManager.import_media": {
      "module": "src/providers/resolve_mcp.py",
      "name": "import_media",
      "full_name": "ResolveManager.import_media",
      "lineno": 83,
      "end_lineno": 93,
      "loc": 11,
      "complexity": 5,
      "args": [
        "self",
        "file_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ResolveManager",
      "docstring": "Import media file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:ResolveManager.create_timeline": {
      "module": "src/providers/resolve_mcp.py",
      "name": "create_timeline",
      "full_name": "ResolveManager.create_timeline",
      "lineno": 95,
      "end_lineno": 105,
      "loc": 11,
      "complexity": 4,
      "args": [
        "self",
        "name"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ResolveManager",
      "docstring": "Create new timeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:ResolveManager.add_clips_to_timeline": {
      "module": "src/providers/resolve_mcp.py",
      "name": "add_clips_to_timeline",
      "full_name": "ResolveManager.add_clips_to_timeline",
      "lineno": 107,
      "end_lineno": 135,
      "loc": 29,
      "complexity": 5,
      "args": [
        "self",
        "timeline",
        "media_item",
        "clips"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ResolveManager",
      "docstring": "Add clips to timeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:ResolveManager.render_proxy": {
      "module": "src/providers/resolve_mcp.py",
      "name": "render_proxy",
      "full_name": "ResolveManager.render_proxy",
      "lineno": 137,
      "end_lineno": 176,
      "loc": 40,
      "complexity": 6,
      "args": [
        "self",
        "timeline",
        "output_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ResolveManager",
      "docstring": "Render proxy/preview",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:build_timeline": {
      "module": "src/providers/resolve_mcp.py",
      "name": "build_timeline",
      "full_name": "build_timeline",
      "lineno": 184,
      "end_lineno": 261,
      "loc": 78,
      "complexity": 13,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Build timeline from clip data with vertical 1080x1920 format",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:render_proxy": {
      "module": "src/providers/resolve_mcp.py",
      "name": "render_proxy",
      "full_name": "render_proxy",
      "lineno": 265,
      "end_lineno": 331,
      "loc": 67,
      "complexity": 12,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Render proxy/preview video",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:status": {
      "module": "src/providers/resolve_mcp.py",
      "name": "status",
      "full_name": "status",
      "lineno": 335,
      "end_lineno": 344,
      "loc": 10,
      "complexity": 3,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get MCP bridge status",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:health": {
      "module": "src/providers/resolve_mcp.py",
      "name": "health",
      "full_name": "health",
      "lineno": 348,
      "end_lineno": 350,
      "loc": 3,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Health check endpoint",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/resolve_mcp.py:start_server": {
      "module": "src/providers/resolve_mcp.py",
      "name": "start_server",
      "full_name": "start_server",
      "lineno": 353,
      "end_lineno": 361,
      "loc": 9,
      "complexity": 2,
      "args": [
        "host",
        "port"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Start the MCP bridge server",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:ProbeResult.to_dict": {
      "module": "src/providers/video_probe.py",
      "name": "to_dict",
      "full_name": "ProbeResult.to_dict",
      "lineno": 42,
      "end_lineno": 59,
      "loc": 18,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ProbeResult",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe.__init__": {
      "module": "src/providers/video_probe.py",
      "name": "__init__",
      "full_name": "VideoProbe.__init__",
      "lineno": 65,
      "end_lineno": 68,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._init_face_detection": {
      "module": "src/providers/video_probe.py",
      "name": "_init_face_detection",
      "full_name": "VideoProbe._init_face_detection",
      "lineno": 70,
      "end_lineno": 77,
      "loc": 8,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Initialize face detection cascade",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe.quick_probe": {
      "module": "src/providers/video_probe.py",
      "name": "quick_probe",
      "full_name": "VideoProbe.quick_probe",
      "lineno": 79,
      "end_lineno": 134,
      "loc": 56,
      "complexity": 3,
      "args": [
        "self",
        "video_path",
        "sample_seconds"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Quickly analyze video to determine optimal processing path\nSamples only first N seconds for efficiency",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._get_basic_metadata": {
      "module": "src/providers/video_probe.py",
      "name": "_get_basic_metadata",
      "full_name": "VideoProbe._get_basic_metadata",
      "lineno": 136,
      "end_lineno": 165,
      "loc": 30,
      "complexity": 5,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Extract basic video metadata using ffprobe",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._estimate_speakers": {
      "module": "src/providers/video_probe.py",
      "name": "_estimate_speakers",
      "full_name": "VideoProbe._estimate_speakers",
      "lineno": 167,
      "end_lineno": 212,
      "loc": 46,
      "complexity": 11,
      "args": [
        "self",
        "video_path",
        "sample_seconds"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Estimate number of speakers using audio energy patterns",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._detect_music": {
      "module": "src/providers/video_probe.py",
      "name": "_detect_music",
      "full_name": "VideoProbe._detect_music",
      "lineno": 214,
      "end_lineno": 272,
      "loc": 59,
      "complexity": 9,
      "args": [
        "self",
        "video_path",
        "sample_seconds"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Detect if video contains music using frequency analysis",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._count_scene_changes": {
      "module": "src/providers/video_probe.py",
      "name": "_count_scene_changes",
      "full_name": "VideoProbe._count_scene_changes",
      "lineno": 274,
      "end_lineno": 321,
      "loc": 48,
      "complexity": 8,
      "args": [
        "self",
        "video_path",
        "sample_seconds"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Count scene changes using frame difference analysis",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._analyze_motion": {
      "module": "src/providers/video_probe.py",
      "name": "_analyze_motion",
      "full_name": "VideoProbe._analyze_motion",
      "lineno": 323,
      "end_lineno": 390,
      "loc": 68,
      "complexity": 13,
      "args": [
        "self",
        "video_path",
        "sample_seconds"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Analyze motion intensity and audio energy variance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._detect_faces": {
      "module": "src/providers/video_probe.py",
      "name": "_detect_faces",
      "full_name": "VideoProbe._detect_faces",
      "lineno": 392,
      "end_lineno": 432,
      "loc": 41,
      "complexity": 7,
      "args": [
        "self",
        "video_path",
        "sample_seconds"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Count unique faces in video sample",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._extract_audio_sample": {
      "module": "src/providers/video_probe.py",
      "name": "_extract_audio_sample",
      "full_name": "VideoProbe._extract_audio_sample",
      "lineno": 434,
      "end_lineno": 453,
      "loc": 20,
      "complexity": 3,
      "args": [
        "self",
        "video_path",
        "duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Extract audio sample for analysis",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._find_peaks": {
      "module": "src/providers/video_probe.py",
      "name": "_find_peaks",
      "full_name": "VideoProbe._find_peaks",
      "lineno": 455,
      "end_lineno": 464,
      "loc": 10,
      "complexity": 5,
      "args": [
        "self",
        "signal",
        "threshold_factor"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Find peaks in signal for rhythm detection",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._calculate_technical_density": {
      "module": "src/providers/video_probe.py",
      "name": "_calculate_technical_density",
      "full_name": "VideoProbe._calculate_technical_density",
      "lineno": 466,
      "end_lineno": 490,
      "loc": 25,
      "complexity": 5,
      "args": [
        "self",
        "results"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Calculate technical content density score",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._classify_complexity": {
      "module": "src/providers/video_probe.py",
      "name": "_classify_complexity",
      "full_name": "VideoProbe._classify_complexity",
      "lineno": 492,
      "end_lineno": 532,
      "loc": 41,
      "complexity": 13,
      "args": [
        "self",
        "probe"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Classify video complexity based on probe results",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:VideoProbe._recommend_track": {
      "module": "src/providers/video_probe.py",
      "name": "_recommend_track",
      "full_name": "VideoProbe._recommend_track",
      "lineno": 534,
      "end_lineno": 563,
      "loc": 30,
      "complexity": 7,
      "args": [
        "self",
        "probe"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoProbe",
      "docstring": "Recommend processing track based on analysis",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_probe.py:main": {
      "module": "src/providers/video_probe.py",
      "name": "main",
      "full_name": "main",
      "lineno": 566,
      "end_lineno": 581,
      "loc": 16,
      "complexity": 3,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Test video probe functionality",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer.__init__": {
      "module": "src/providers/selective_enhancer.py",
      "name": "__init__",
      "full_name": "SelectiveEnhancer.__init__",
      "lineno": 39,
      "end_lineno": 49,
      "loc": 11,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer.enhance_highlights_only": {
      "module": "src/providers/selective_enhancer.py",
      "name": "enhance_highlights_only",
      "full_name": "SelectiveEnhancer.enhance_highlights_only",
      "lineno": 51,
      "end_lineno": 132,
      "loc": 82,
      "complexity": 12,
      "args": [
        "self",
        "smart_result",
        "budget",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Enhance only the best highlights within budget",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer.process_complex_sections": {
      "module": "src/providers/selective_enhancer.py",
      "name": "process_complex_sections",
      "full_name": "SelectiveEnhancer.process_complex_sections",
      "lineno": 134,
      "end_lineno": 184,
      "loc": 51,
      "complexity": 6,
      "args": [
        "self",
        "video_path",
        "complex_sections",
        "probe"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Process only complex sections with premium tools",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._enhance_segment": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_enhance_segment",
      "full_name": "SelectiveEnhancer._enhance_segment",
      "lineno": 186,
      "end_lineno": 249,
      "loc": 64,
      "complexity": 11,
      "args": [
        "self",
        "segment",
        "video_path",
        "remaining_budget"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Enhance a single segment with appropriate tools",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._process_multi_speaker_section": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_process_multi_speaker_section",
      "full_name": "SelectiveEnhancer._process_multi_speaker_section",
      "lineno": 251,
      "end_lineno": 284,
      "loc": 34,
      "complexity": 1,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Process section with multiple speakers",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._process_technical_section": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_process_technical_section",
      "full_name": "SelectiveEnhancer._process_technical_section",
      "lineno": 286,
      "end_lineno": 347,
      "loc": 62,
      "complexity": 7,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Process technical/educational content",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._transcribe_segment": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_transcribe_segment",
      "full_name": "SelectiveEnhancer._transcribe_segment",
      "lineno": 349,
      "end_lineno": 369,
      "loc": 21,
      "complexity": 2,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Transcribe a specific segment",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._gpt_enhance_transcript": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_gpt_enhance_transcript",
      "full_name": "SelectiveEnhancer._gpt_enhance_transcript",
      "lineno": 371,
      "end_lineno": 437,
      "loc": 67,
      "complexity": 5,
      "args": [
        "self",
        "transcript"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "REAL GPT to analyze and enhance transcript",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "ai"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._diarize_segment": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_diarize_segment",
      "full_name": "SelectiveEnhancer._diarize_segment",
      "lineno": 439,
      "end_lineno": 510,
      "loc": 72,
      "complexity": 5,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "REAL speaker diarization using pyannote-audio",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._estimate_segment_cost": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_estimate_segment_cost",
      "full_name": "SelectiveEnhancer._estimate_segment_cost",
      "lineno": 512,
      "end_lineno": 531,
      "loc": 20,
      "complexity": 5,
      "args": [
        "self",
        "segment",
        "duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Estimate cost to enhance a segment",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._extract_dialogue_highlights": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_extract_dialogue_highlights",
      "full_name": "SelectiveEnhancer._extract_dialogue_highlights",
      "lineno": 533,
      "end_lineno": 549,
      "loc": 17,
      "complexity": 1,
      "args": [
        "self",
        "transcript",
        "diarization",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Extract interesting dialogue moments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._get_transcript_chunk": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_get_transcript_chunk",
      "full_name": "SelectiveEnhancer._get_transcript_chunk",
      "lineno": 551,
      "end_lineno": 568,
      "loc": 18,
      "complexity": 4,
      "args": [
        "self",
        "segments",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Extract transcript text for time range",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._analyze_technical_content": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_analyze_technical_content",
      "full_name": "SelectiveEnhancer._analyze_technical_content",
      "lineno": 570,
      "end_lineno": 590,
      "loc": 21,
      "complexity": 5,
      "args": [
        "self",
        "text"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Analyze technical content importance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SelectiveEnhancer._process_general_complex": {
      "module": "src/providers/selective_enhancer.py",
      "name": "_process_general_complex",
      "full_name": "SelectiveEnhancer._process_general_complex",
      "lineno": 592,
      "end_lineno": 613,
      "loc": 22,
      "complexity": 1,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SelectiveEnhancer",
      "docstring": "Process general complex content",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:SpeakerDiarizer.diarize_section": {
      "module": "src/providers/selective_enhancer.py",
      "name": "diarize_section",
      "full_name": "SpeakerDiarizer.diarize_section",
      "lineno": 620,
      "end_lineno": 630,
      "loc": 11,
      "complexity": 1,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/selective_enhancer.py:main": {
      "module": "src/providers/selective_enhancer.py",
      "name": "main",
      "full_name": "main",
      "lineno": 633,
      "end_lineno": 689,
      "loc": 57,
      "complexity": 5,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Test selective enhancement",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptSegment.duration": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "duration",
      "full_name": "TranscriptSegment.duration",
      "lineno": 35,
      "end_lineno": 36,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "property"
      ],
      "is_method": true,
      "class_name": "TranscriptSegment",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": true,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer.__init__": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "__init__",
      "full_name": "TranscriptAnalyzer.__init__",
      "lineno": 56,
      "end_lineno": 61,
      "loc": 6,
      "complexity": 2,
      "args": [
        "self",
        "api_key"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db",
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer.analyze_transcript": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "analyze_transcript",
      "full_name": "TranscriptAnalyzer.analyze_transcript",
      "lineno": 63,
      "end_lineno": 110,
      "loc": 48,
      "complexity": 4,
      "args": [
        "self",
        "job_id",
        "transcript_segments",
        "audio_path",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Analyze transcript with multi-modal scoring.\n\nScore = TF-IDF \u00d7 Audio_RMS \u00d7 Visual_Energy",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer._chunk_transcript": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "_chunk_transcript",
      "full_name": "TranscriptAnalyzer._chunk_transcript",
      "lineno": 112,
      "end_lineno": 138,
      "loc": 27,
      "complexity": 5,
      "args": [
        "self",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Split transcript into overlapping chunks for LLM processing",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer._analyze_chunk": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "_analyze_chunk",
      "full_name": "TranscriptAnalyzer._analyze_chunk",
      "lineno": 141,
      "end_lineno": 234,
      "loc": 94,
      "complexity": 9,
      "args": [
        "self",
        "chunk_text",
        "all_segments",
        "audio_features",
        "visual_features"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Analyze a chunk of transcript using LLM",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer._find_segment_for_text": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "_find_segment_for_text",
      "full_name": "TranscriptAnalyzer._find_segment_for_text",
      "lineno": 236,
      "end_lineno": 257,
      "loc": 22,
      "complexity": 6,
      "args": [
        "self",
        "text",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Find the transcript segment containing the given text",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer._calculate_tfidf_score": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "_calculate_tfidf_score",
      "full_name": "TranscriptAnalyzer._calculate_tfidf_score",
      "lineno": 259,
      "end_lineno": 284,
      "loc": 26,
      "complexity": 8,
      "args": [
        "self",
        "text",
        "keywords"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Calculate TF-IDF score for text importance",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer._extract_audio_features": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "_extract_audio_features",
      "full_name": "TranscriptAnalyzer._extract_audio_features",
      "lineno": 286,
      "end_lineno": 321,
      "loc": 36,
      "complexity": 10,
      "args": [
        "self",
        "audio_path",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Extract audio RMS energy for each segment",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer._extract_visual_features": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "_extract_visual_features",
      "full_name": "TranscriptAnalyzer._extract_visual_features",
      "lineno": 323,
      "end_lineno": 370,
      "loc": 48,
      "complexity": 11,
      "args": [
        "self",
        "video_path",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Extract visual energy (motion) for each segment",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer._merge_and_rank_results": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "_merge_and_rank_results",
      "full_name": "TranscriptAnalyzer._merge_and_rank_results",
      "lineno": 372,
      "end_lineno": 404,
      "loc": 33,
      "complexity": 7,
      "args": [
        "self",
        "results"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Merge overlapping results and rank by score",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer._calculate_file_hash": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "_calculate_file_hash",
      "full_name": "TranscriptAnalyzer._calculate_file_hash",
      "lineno": 406,
      "end_lineno": 414,
      "loc": 9,
      "complexity": 2,
      "args": [
        "self",
        "file_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Calculate hash of file for caching",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer._get_cached_analysis": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "_get_cached_analysis",
      "full_name": "TranscriptAnalyzer._get_cached_analysis",
      "lineno": 416,
      "end_lineno": 445,
      "loc": 30,
      "complexity": 4,
      "args": [
        "self",
        "file_hash"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Retrieve cached analysis results",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:TranscriptAnalyzer._cache_analysis": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "_cache_analysis",
      "full_name": "TranscriptAnalyzer._cache_analysis",
      "lineno": 447,
      "end_lineno": 471,
      "loc": 25,
      "complexity": 2,
      "args": [
        "self",
        "file_hash",
        "results",
        "provider"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "TranscriptAnalyzer",
      "docstring": "Cache analysis results",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:transcribe_audio_whisper": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "transcribe_audio_whisper",
      "full_name": "transcribe_audio_whisper",
      "lineno": 476,
      "end_lineno": 498,
      "loc": 23,
      "complexity": 2,
      "args": [
        "audio_path",
        "job_id"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Transcribe audio using OpenAI Whisper API",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file",
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/transcript_analyzer.py:analyze_video_content": {
      "module": "src/providers/transcript_analyzer.py",
      "name": "analyze_video_content",
      "full_name": "analyze_video_content",
      "lineno": 502,
      "end_lineno": 548,
      "loc": 47,
      "complexity": 3,
      "args": [
        "job_id",
        "video_path",
        "audio_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Main entry point for video content analysis",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:VideoSegment.__post_init__": {
      "module": "src/providers/video_processor.py",
      "name": "__post_init__",
      "full_name": "VideoSegment.__post_init__",
      "lineno": 38,
      "end_lineno": 40,
      "loc": 3,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoSegment",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:VideoSegment.duration": {
      "module": "src/providers/video_processor.py",
      "name": "duration",
      "full_name": "VideoSegment.duration",
      "lineno": 43,
      "end_lineno": 44,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "property"
      ],
      "is_method": true,
      "class_name": "VideoSegment",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": true,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FIFOManager.__init__": {
      "module": "src/providers/video_processor.py",
      "name": "__init__",
      "full_name": "FIFOManager.__init__",
      "lineno": 50,
      "end_lineno": 54,
      "loc": 5,
      "complexity": 2,
      "args": [
        "self",
        "temp_dir"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FIFOManager",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FIFOManager.create_fifo": {
      "module": "src/providers/video_processor.py",
      "name": "create_fifo",
      "full_name": "FIFOManager.create_fifo",
      "lineno": 56,
      "end_lineno": 75,
      "loc": 20,
      "complexity": 3,
      "args": [
        "self",
        "name_suffix"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FIFOManager",
      "docstring": "Create a named pipe and return its path",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FIFOManager.cleanup": {
      "module": "src/providers/video_processor.py",
      "name": "cleanup",
      "full_name": "FIFOManager.cleanup",
      "lineno": 77,
      "end_lineno": 87,
      "loc": 11,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FIFOManager",
      "docstring": "Remove all created FIFOs",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FIFOManager._signal_handler": {
      "module": "src/providers/video_processor.py",
      "name": "_signal_handler",
      "full_name": "FIFOManager._signal_handler",
      "lineno": 89,
      "end_lineno": 92,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self",
        "signum",
        "frame"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FIFOManager",
      "docstring": "Clean up FIFOs on signal",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FIFOManager.__enter__": {
      "module": "src/providers/video_processor.py",
      "name": "__enter__",
      "full_name": "FIFOManager.__enter__",
      "lineno": 94,
      "end_lineno": 95,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FIFOManager",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FIFOManager.__exit__": {
      "module": "src/providers/video_processor.py",
      "name": "__exit__",
      "full_name": "FIFOManager.__exit__",
      "lineno": 97,
      "end_lineno": 98,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "exc_type",
        "exc_val",
        "exc_tb"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FIFOManager",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FFmpegPipeline.__init__": {
      "module": "src/providers/video_processor.py",
      "name": "__init__",
      "full_name": "FFmpegPipeline.__init__",
      "lineno": 104,
      "end_lineno": 107,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FFmpegPipeline",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FFmpegPipeline.add_process": {
      "module": "src/providers/video_processor.py",
      "name": "add_process",
      "full_name": "FFmpegPipeline.add_process",
      "lineno": 109,
      "end_lineno": 139,
      "loc": 31,
      "complexity": 2,
      "args": [
        "self",
        "cmd",
        "name"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FFmpegPipeline",
      "docstring": "Add an FFmpeg process to the pipeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FFmpegPipeline._monitor_stderr": {
      "module": "src/providers/video_processor.py",
      "name": "_monitor_stderr",
      "full_name": "FFmpegPipeline._monitor_stderr",
      "lineno": 141,
      "end_lineno": 161,
      "loc": 21,
      "complexity": 8,
      "args": [
        "self",
        "process",
        "name"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FFmpegPipeline",
      "docstring": "Monitor process stderr for errors and progress",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FFmpegPipeline.wait_all": {
      "module": "src/providers/video_processor.py",
      "name": "wait_all",
      "full_name": "FFmpegPipeline.wait_all",
      "lineno": 163,
      "end_lineno": 196,
      "loc": 34,
      "complexity": 6,
      "args": [
        "self",
        "timeout"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FFmpegPipeline",
      "docstring": "Wait for all processes to complete",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FFmpegPipeline.cleanup": {
      "module": "src/providers/video_processor.py",
      "name": "cleanup",
      "full_name": "FFmpegPipeline.cleanup",
      "lineno": 198,
      "end_lineno": 217,
      "loc": 20,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FFmpegPipeline",
      "docstring": "Clean up all processes and resources",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FFmpegPipeline.__enter__": {
      "module": "src/providers/video_processor.py",
      "name": "__enter__",
      "full_name": "FFmpegPipeline.__enter__",
      "lineno": 219,
      "end_lineno": 220,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FFmpegPipeline",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:FFmpegPipeline.__exit__": {
      "module": "src/providers/video_processor.py",
      "name": "__exit__",
      "full_name": "FFmpegPipeline.__exit__",
      "lineno": 222,
      "end_lineno": 223,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "exc_type",
        "exc_val",
        "exc_tb"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "FFmpegPipeline",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:VideoEditor.__init__": {
      "module": "src/providers/video_processor.py",
      "name": "__init__",
      "full_name": "VideoEditor.__init__",
      "lineno": 229,
      "end_lineno": 231,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoEditor",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:VideoEditor.extract_segments_parallel": {
      "module": "src/providers/video_processor.py",
      "name": "extract_segments_parallel",
      "full_name": "VideoEditor.extract_segments_parallel",
      "lineno": 233,
      "end_lineno": 259,
      "loc": 27,
      "complexity": 2,
      "args": [
        "self",
        "input_file",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoEditor",
      "docstring": "Extract multiple segments in parallel using FIFOs",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:VideoEditor.concatenate_segments_fifo": {
      "module": "src/providers/video_processor.py",
      "name": "concatenate_segments_fifo",
      "full_name": "VideoEditor.concatenate_segments_fifo",
      "lineno": 261,
      "end_lineno": 295,
      "loc": 35,
      "complexity": 3,
      "args": [
        "self",
        "segment_fifos",
        "output_file",
        "video_codec",
        "audio_codec"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoEditor",
      "docstring": "Concatenate segments from FIFOs without intermediate files",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:VideoEditor._create_concat_list": {
      "module": "src/providers/video_processor.py",
      "name": "_create_concat_list",
      "full_name": "VideoEditor._create_concat_list",
      "lineno": 297,
      "end_lineno": 305,
      "loc": 9,
      "complexity": 2,
      "args": [
        "self",
        "fifos"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoEditor",
      "docstring": "Create concat demuxer list file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:VideoEditor.process_with_filter_fifo": {
      "module": "src/providers/video_processor.py",
      "name": "process_with_filter_fifo",
      "full_name": "VideoEditor.process_with_filter_fifo",
      "lineno": 307,
      "end_lineno": 348,
      "loc": 42,
      "complexity": 3,
      "args": [
        "self",
        "input_file",
        "output_file",
        "filter_complex",
        "video_codec",
        "audio_codec"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoEditor",
      "docstring": "Process video through filter using FIFO pipeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:VideoEditor.apply_transitions_fifo": {
      "module": "src/providers/video_processor.py",
      "name": "apply_transitions_fifo",
      "full_name": "VideoEditor.apply_transitions_fifo",
      "lineno": 350,
      "end_lineno": 373,
      "loc": 24,
      "complexity": 3,
      "args": [
        "self",
        "input_file",
        "output_file",
        "transition_points",
        "transition_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoEditor",
      "docstring": "Apply transitions at specified points using xfade filter",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:VideoEditor.extract_and_concatenate_efficient": {
      "module": "src/providers/video_processor.py",
      "name": "extract_and_concatenate_efficient",
      "full_name": "VideoEditor.extract_and_concatenate_efficient",
      "lineno": 375,
      "end_lineno": 423,
      "loc": 49,
      "complexity": 9,
      "args": [
        "self",
        "input_file",
        "segments",
        "output_file",
        "apply_transitions"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoEditor",
      "docstring": "Efficient extraction and concatenation using parallel FIFOs",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:video_processing_pipeline": {
      "module": "src/providers/video_processor.py",
      "name": "video_processing_pipeline",
      "full_name": "video_processing_pipeline",
      "lineno": 427,
      "end_lineno": 433,
      "loc": 7,
      "complexity": 1,
      "args": [],
      "decorators": [
        "contextmanager"
      ],
      "is_method": false,
      "class_name": null,
      "docstring": "Context manager for video processing pipeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/video_processor.py:example_usage": {
      "module": "src/providers/video_processor.py",
      "name": "example_usage",
      "full_name": "example_usage",
      "lineno": 437,
      "end_lineno": 455,
      "loc": 19,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Example of using the FIFO-based video processor",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:EditSegment.__post_init__": {
      "module": "src/providers/concat_editor.py",
      "name": "__post_init__",
      "full_name": "EditSegment.__post_init__",
      "lineno": 29,
      "end_lineno": 31,
      "loc": 3,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "EditSegment",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:EditSegment.duration": {
      "module": "src/providers/concat_editor.py",
      "name": "duration",
      "full_name": "EditSegment.duration",
      "lineno": 34,
      "end_lineno": 35,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "property"
      ],
      "is_method": true,
      "class_name": "EditSegment",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": true,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor.__init__": {
      "module": "src/providers/concat_editor.py",
      "name": "__init__",
      "full_name": "ConcatEditor.__init__",
      "lineno": 41,
      "end_lineno": 44,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor.execute_edit": {
      "module": "src/providers/concat_editor.py",
      "name": "execute_edit",
      "full_name": "ConcatEditor.execute_edit",
      "lineno": 46,
      "end_lineno": 113,
      "loc": 68,
      "complexity": 7,
      "args": [
        "self",
        "segments",
        "output_file",
        "apply_transitions",
        "video_codec",
        "audio_codec"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": "Execute video edit using concat demuxer approach.\n\nThis method:\n1. Extracts segments to temporary files\n2. Creates concat list file\n3. Concatenates using concat demuxer\n4. Applies transitions with minimal filter complexity",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor._extract_segments_to_files": {
      "module": "src/providers/concat_editor.py",
      "name": "_extract_segments_to_files",
      "full_name": "ConcatEditor._extract_segments_to_files",
      "lineno": 115,
      "end_lineno": 152,
      "loc": 38,
      "complexity": 5,
      "args": [
        "self",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": "Extract segments to temporary files in parallel",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor._create_concat_list": {
      "module": "src/providers/concat_editor.py",
      "name": "_create_concat_list",
      "full_name": "ConcatEditor._create_concat_list",
      "lineno": 154,
      "end_lineno": 167,
      "loc": 14,
      "complexity": 2,
      "args": [
        "self",
        "files"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": "Create concat demuxer input file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor._simple_concat": {
      "module": "src/providers/concat_editor.py",
      "name": "_simple_concat",
      "full_name": "ConcatEditor._simple_concat",
      "lineno": 169,
      "end_lineno": 192,
      "loc": 24,
      "complexity": 2,
      "args": [
        "self",
        "concat_list",
        "output_file",
        "video_codec",
        "audio_codec"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": "Simple concatenation without transitions",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor._concat_with_transitions": {
      "module": "src/providers/concat_editor.py",
      "name": "_concat_with_transitions",
      "full_name": "ConcatEditor._concat_with_transitions",
      "lineno": 194,
      "end_lineno": 240,
      "loc": 47,
      "complexity": 4,
      "args": [
        "self",
        "concat_list",
        "output_file",
        "segments",
        "video_codec",
        "audio_codec"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": "Concatenate with xfade transitions between segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor._build_xfade_filter": {
      "module": "src/providers/concat_editor.py",
      "name": "_build_xfade_filter",
      "full_name": "ConcatEditor._build_xfade_filter",
      "lineno": 242,
      "end_lineno": 262,
      "loc": 21,
      "complexity": 5,
      "args": [
        "self",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": "Build minimal xfade filter string",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor._concat_with_batch_transitions": {
      "module": "src/providers/concat_editor.py",
      "name": "_concat_with_batch_transitions",
      "full_name": "ConcatEditor._concat_with_batch_transitions",
      "lineno": 264,
      "end_lineno": 293,
      "loc": 30,
      "complexity": 3,
      "args": [
        "self",
        "concat_list",
        "output_file",
        "segments",
        "video_codec",
        "audio_codec"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": "Handle large numbers of segments by batching transitions",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor._apply_fade_transitions": {
      "module": "src/providers/concat_editor.py",
      "name": "_apply_fade_transitions",
      "full_name": "ConcatEditor._apply_fade_transitions",
      "lineno": 295,
      "end_lineno": 320,
      "loc": 26,
      "complexity": 2,
      "args": [
        "self",
        "input_file",
        "output_file",
        "transition_points"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": "Apply fade transitions at specified points",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor._cleanup_temp_files": {
      "module": "src/providers/concat_editor.py",
      "name": "_cleanup_temp_files",
      "full_name": "ConcatEditor._cleanup_temp_files",
      "lineno": 322,
      "end_lineno": 330,
      "loc": 9,
      "complexity": 4,
      "args": [
        "self",
        "files"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": "Clean up temporary segment files",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:ConcatEditor.verify_filter_length": {
      "module": "src/providers/concat_editor.py",
      "name": "verify_filter_length",
      "full_name": "ConcatEditor.verify_filter_length",
      "lineno": 332,
      "end_lineno": 343,
      "loc": 12,
      "complexity": 2,
      "args": [
        "self",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "ConcatEditor",
      "docstring": "Verify filter complexity meets requirements",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:create_edit_segments": {
      "module": "src/providers/concat_editor.py",
      "name": "create_edit_segments",
      "full_name": "create_edit_segments",
      "lineno": 348,
      "end_lineno": 362,
      "loc": 15,
      "complexity": 2,
      "args": [
        "highlights",
        "source_file"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Convert highlight data to edit segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/concat_editor.py:example_concat_edit": {
      "module": "src/providers/concat_editor.py",
      "name": "example_concat_edit",
      "full_name": "example_concat_edit",
      "lineno": 366,
      "end_lineno": 390,
      "loc": 25,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Example of using concat editor",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer.__init__": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "__init__",
      "full_name": "SpeakerDiarizer.__init__",
      "lineno": 48,
      "end_lineno": 62,
      "loc": 15,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer.diarize_if_needed": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "diarize_if_needed",
      "full_name": "SpeakerDiarizer.diarize_if_needed",
      "lineno": 64,
      "end_lineno": 91,
      "loc": 28,
      "complexity": 6,
      "args": [
        "self",
        "video_path",
        "probe_result",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Main entry point - only diarizes if multiple speakers detected",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer.diarize_section": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "diarize_section",
      "full_name": "SpeakerDiarizer.diarize_section",
      "lineno": 93,
      "end_lineno": 130,
      "loc": 38,
      "complexity": 4,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Diarize a specific section of video",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._estimate_speakers_quick": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_estimate_speakers_quick",
      "full_name": "SpeakerDiarizer._estimate_speakers_quick",
      "lineno": 132,
      "end_lineno": 174,
      "loc": 43,
      "complexity": 5,
      "args": [
        "self",
        "video_path",
        "sample_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Quick speaker count estimation using energy patterns",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._detect_speaker_changes": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_detect_speaker_changes",
      "full_name": "SpeakerDiarizer._detect_speaker_changes",
      "lineno": 176,
      "end_lineno": 208,
      "loc": 33,
      "complexity": 8,
      "args": [
        "self",
        "audio_data",
        "sample_rate"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Detect potential speaker changes from audio energy",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._diarize_segments": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_diarize_segments",
      "full_name": "SpeakerDiarizer._diarize_segments",
      "lineno": 210,
      "end_lineno": 238,
      "loc": 29,
      "complexity": 3,
      "args": [
        "self",
        "video_path",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Diarize only specified segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._diarize_full_video": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_diarize_full_video",
      "full_name": "SpeakerDiarizer._diarize_full_video",
      "lineno": 240,
      "end_lineno": 252,
      "loc": 13,
      "complexity": 2,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Diarize entire video",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._diarize_section_internal": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_diarize_section_internal",
      "full_name": "SpeakerDiarizer._diarize_section_internal",
      "lineno": 254,
      "end_lineno": 272,
      "loc": 19,
      "complexity": 3,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Internal method to diarize a section",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._diarize_api_section": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_diarize_api_section",
      "full_name": "SpeakerDiarizer._diarize_api_section",
      "lineno": 274,
      "end_lineno": 312,
      "loc": 39,
      "complexity": 2,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Use cloud API for diarization (mock implementation)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._diarize_local_section": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_diarize_local_section",
      "full_name": "SpeakerDiarizer._diarize_local_section",
      "lineno": 314,
      "end_lineno": 345,
      "loc": 32,
      "complexity": 3,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Use local diarization (energy-based for demo)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._energy_based_diarization": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_energy_based_diarization",
      "full_name": "SpeakerDiarizer._energy_based_diarization",
      "lineno": 347,
      "end_lineno": 404,
      "loc": 58,
      "complexity": 10,
      "args": [
        "self",
        "audio_data",
        "sample_rate",
        "offset"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Simple energy-based speaker segmentation",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._find_multi_speaker_sections": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_find_multi_speaker_sections",
      "full_name": "SpeakerDiarizer._find_multi_speaker_sections",
      "lineno": 406,
      "end_lineno": 426,
      "loc": 21,
      "complexity": 3,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Find sections likely to have multiple speakers",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._extract_audio_section": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_extract_audio_section",
      "full_name": "SpeakerDiarizer._extract_audio_section",
      "lineno": 428,
      "end_lineno": 457,
      "loc": 30,
      "complexity": 2,
      "args": [
        "self",
        "video_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Extract audio section for processing",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._get_video_duration": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_get_video_duration",
      "full_name": "SpeakerDiarizer._get_video_duration",
      "lineno": 459,
      "end_lineno": 479,
      "loc": 21,
      "complexity": 2,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Get video duration",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._merge_speaker_labels": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_merge_speaker_labels",
      "full_name": "SpeakerDiarizer._merge_speaker_labels",
      "lineno": 481,
      "end_lineno": 493,
      "loc": 13,
      "complexity": 2,
      "args": [
        "self",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Merge speaker labels across segments for consistency",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._extract_speaker_list": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_extract_speaker_list",
      "full_name": "SpeakerDiarizer._extract_speaker_list",
      "lineno": 495,
      "end_lineno": 497,
      "loc": 3,
      "complexity": 2,
      "args": [
        "self",
        "result"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Extract unique speaker IDs",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._single_speaker_result": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_single_speaker_result",
      "full_name": "SpeakerDiarizer._single_speaker_result",
      "lineno": 499,
      "end_lineno": 507,
      "loc": 9,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Return result for single speaker video",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._diarize_with_api": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_diarize_with_api",
      "full_name": "SpeakerDiarizer._diarize_with_api",
      "lineno": 509,
      "end_lineno": 514,
      "loc": 6,
      "complexity": 1,
      "args": [
        "self",
        "audio_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Wrapper for API diarization",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:SpeakerDiarizer._diarize_local": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "_diarize_local",
      "full_name": "SpeakerDiarizer._diarize_local",
      "lineno": 516,
      "end_lineno": 521,
      "loc": 6,
      "complexity": 1,
      "args": [
        "self",
        "audio_path",
        "start",
        "end"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpeakerDiarizer",
      "docstring": "Wrapper for local diarization",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/speaker_diarizer.py:main": {
      "module": "src/providers/speaker_diarizer.py",
      "name": "main",
      "full_name": "main",
      "lineno": 524,
      "end_lineno": 557,
      "loc": 34,
      "complexity": 4,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Test speaker diarization",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:LoudnessStats.from_json": {
      "module": "src/providers/audio_normalizer.py",
      "name": "from_json",
      "full_name": "LoudnessStats.from_json",
      "lineno": 33,
      "end_lineno": 41,
      "loc": 9,
      "complexity": 1,
      "args": [
        "cls",
        "data"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_method": true,
      "class_name": "LoudnessStats",
      "docstring": "Create from FFmpeg JSON output",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:NormalizationTarget.to_filter_params": {
      "module": "src/providers/audio_normalizer.py",
      "name": "to_filter_params",
      "full_name": "NormalizationTarget.to_filter_params",
      "lineno": 51,
      "end_lineno": 53,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "NormalizationTarget",
      "docstring": "Convert to loudnorm filter parameters",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:AudioNormalizer.__init__": {
      "module": "src/providers/audio_normalizer.py",
      "name": "__init__",
      "full_name": "AudioNormalizer.__init__",
      "lineno": 59,
      "end_lineno": 62,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AudioNormalizer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:AudioNormalizer.normalize_audio": {
      "module": "src/providers/audio_normalizer.py",
      "name": "normalize_audio",
      "full_name": "AudioNormalizer.normalize_audio",
      "lineno": 65,
      "end_lineno": 115,
      "loc": 51,
      "complexity": 4,
      "args": [
        "self",
        "input_file",
        "output_file",
        "target",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AudioNormalizer",
      "docstring": "Perform two-pass audio normalization.\n\nReturns:\n    Dict with normalization results and metrics",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:AudioNormalizer._analyze_loudness": {
      "module": "src/providers/audio_normalizer.py",
      "name": "_analyze_loudness",
      "full_name": "AudioNormalizer._analyze_loudness",
      "lineno": 117,
      "end_lineno": 156,
      "loc": 40,
      "complexity": 4,
      "args": [
        "self",
        "input_file"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AudioNormalizer",
      "docstring": "Pass 1: Analyze audio loudness",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:AudioNormalizer._apply_normalization": {
      "module": "src/providers/audio_normalizer.py",
      "name": "_apply_normalization",
      "full_name": "AudioNormalizer._apply_normalization",
      "lineno": 158,
      "end_lineno": 192,
      "loc": 35,
      "complexity": 2,
      "args": [
        "self",
        "input_file",
        "output_file",
        "stats",
        "target"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AudioNormalizer",
      "docstring": "Pass 2: Apply normalization with measured values",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:AudioNormalizer._verify_normalization": {
      "module": "src/providers/audio_normalizer.py",
      "name": "_verify_normalization",
      "full_name": "AudioNormalizer._verify_normalization",
      "lineno": 194,
      "end_lineno": 208,
      "loc": 15,
      "complexity": 2,
      "args": [
        "self",
        "output_file"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AudioNormalizer",
      "docstring": "Verify normalization results",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:AudioNormalizer.normalize_segments": {
      "module": "src/providers/audio_normalizer.py",
      "name": "normalize_segments",
      "full_name": "AudioNormalizer.normalize_segments",
      "lineno": 210,
      "end_lineno": 292,
      "loc": 83,
      "complexity": 9,
      "args": [
        "self",
        "segments",
        "output_files",
        "target"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AudioNormalizer",
      "docstring": "Normalize multiple segments to consistent loudness.\n\nThis ensures RMS spread \u2264 1.5 LU between segments.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:AudioNormalizer.apply_ebur128_analysis": {
      "module": "src/providers/audio_normalizer.py",
      "name": "apply_ebur128_analysis",
      "full_name": "AudioNormalizer.apply_ebur128_analysis",
      "lineno": 294,
      "end_lineno": 341,
      "loc": 48,
      "complexity": 5,
      "args": [
        "self",
        "input_file"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AudioNormalizer",
      "docstring": "Analyze audio using EBU R128 standard.\n\nReturns detailed loudness measurements.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:normalize_video_audio": {
      "module": "src/providers/audio_normalizer.py",
      "name": "normalize_video_audio",
      "full_name": "normalize_video_audio",
      "lineno": 346,
      "end_lineno": 354,
      "loc": 9,
      "complexity": 1,
      "args": [
        "input_video",
        "output_video",
        "target"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Normalize audio track of a video file.\n\nThis is a convenience function for video processing integration.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:AudioNormalizedEditor.__init__": {
      "module": "src/providers/audio_normalizer.py",
      "name": "__init__",
      "full_name": "AudioNormalizedEditor.__init__",
      "lineno": 361,
      "end_lineno": 362,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AudioNormalizedEditor",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/audio_normalizer.py:AudioNormalizedEditor.process_video_with_normalization": {
      "module": "src/providers/audio_normalizer.py",
      "name": "process_video_with_normalization",
      "full_name": "AudioNormalizedEditor.process_video_with_normalization",
      "lineno": 364,
      "end_lineno": 391,
      "loc": 28,
      "complexity": 2,
      "args": [
        "self",
        "input_file",
        "output_file",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AudioNormalizedEditor",
      "docstring": "Process video with audio normalization",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:Face.center_x": {
      "module": "src/providers/smart_crop.py",
      "name": "center_x",
      "full_name": "Face.center_x",
      "lineno": 29,
      "end_lineno": 30,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "property"
      ],
      "is_method": true,
      "class_name": "Face",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": true,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:Face.center_y": {
      "module": "src/providers/smart_crop.py",
      "name": "center_y",
      "full_name": "Face.center_y",
      "lineno": 33,
      "end_lineno": 34,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "property"
      ],
      "is_method": true,
      "class_name": "Face",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": true,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:Face.area": {
      "module": "src/providers/smart_crop.py",
      "name": "area",
      "full_name": "Face.area",
      "lineno": 37,
      "end_lineno": 38,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "property"
      ],
      "is_method": true,
      "class_name": "Face",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": true,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:CropBox.center_x": {
      "module": "src/providers/smart_crop.py",
      "name": "center_x",
      "full_name": "CropBox.center_x",
      "lineno": 52,
      "end_lineno": 53,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "property"
      ],
      "is_method": true,
      "class_name": "CropBox",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": true,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:CropBox.center_y": {
      "module": "src/providers/smart_crop.py",
      "name": "center_y",
      "full_name": "CropBox.center_y",
      "lineno": 56,
      "end_lineno": 57,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [
        "property"
      ],
      "is_method": true,
      "class_name": "CropBox",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": true,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:CropBox.contains_point": {
      "module": "src/providers/smart_crop.py",
      "name": "contains_point",
      "full_name": "CropBox.contains_point",
      "lineno": 59,
      "end_lineno": 62,
      "loc": 4,
      "complexity": 2,
      "args": [
        "self",
        "x",
        "y"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CropBox",
      "docstring": "Check if point is within crop box",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SpringDamper.__init__": {
      "module": "src/providers/smart_crop.py",
      "name": "__init__",
      "full_name": "SpringDamper.__init__",
      "lineno": 68,
      "end_lineno": 70,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "stiffness",
        "damping"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpringDamper",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SpringDamper.update": {
      "module": "src/providers/smart_crop.py",
      "name": "update",
      "full_name": "SpringDamper.update",
      "lineno": 72,
      "end_lineno": 94,
      "loc": 23,
      "complexity": 1,
      "args": [
        "self",
        "current",
        "target",
        "velocity",
        "dt"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SpringDamper",
      "docstring": "Update position using spring-damper physics.\n\nReturns:\n    (new_position, new_velocity)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SmartCropper.__init__": {
      "module": "src/providers/smart_crop.py",
      "name": "__init__",
      "full_name": "SmartCropper.__init__",
      "lineno": 100,
      "end_lineno": 112,
      "loc": 13,
      "complexity": 1,
      "args": [
        "self",
        "output_aspect_ratio"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartCropper",
      "docstring": "Initialize smart cropper.\n\nArgs:\n    output_aspect_ratio: Target aspect ratio (9:16 for vertical)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SmartCropper.process_video": {
      "module": "src/providers/smart_crop.py",
      "name": "process_video",
      "full_name": "SmartCropper.process_video",
      "lineno": 115,
      "end_lineno": 231,
      "loc": 117,
      "complexity": 10,
      "args": [
        "self",
        "input_path",
        "output_path",
        "video_duration"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartCropper",
      "docstring": "Process video with smart cropping.\n\nReturns:\n    Processing statistics and crop metadata",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SmartCropper._detect_faces": {
      "module": "src/providers/smart_crop.py",
      "name": "_detect_faces",
      "full_name": "SmartCropper._detect_faces",
      "lineno": 233,
      "end_lineno": 250,
      "loc": 18,
      "complexity": 2,
      "args": [
        "self",
        "frame"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartCropper",
      "docstring": "Detect faces in frame using OpenCV",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SmartCropper._calculate_target_position": {
      "module": "src/providers/smart_crop.py",
      "name": "_calculate_target_position",
      "full_name": "SmartCropper._calculate_target_position",
      "lineno": 252,
      "end_lineno": 296,
      "loc": 45,
      "complexity": 8,
      "args": [
        "self",
        "faces",
        "frame_width",
        "frame_height",
        "crop_box"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartCropper",
      "docstring": "Calculate target position for crop box based on faces.\n\nReturns:\n    (target_x, target_y, confidence)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SmartCropper._update_crop_box": {
      "module": "src/providers/smart_crop.py",
      "name": "_update_crop_box",
      "full_name": "SmartCropper._update_crop_box",
      "lineno": 298,
      "end_lineno": 322,
      "loc": 25,
      "complexity": 1,
      "args": [
        "self",
        "crop_box",
        "target_x",
        "target_y",
        "dt",
        "frame_width",
        "frame_height"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartCropper",
      "docstring": "Update crop box position with spring damping",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SmartCropper._apply_crop": {
      "module": "src/providers/smart_crop.py",
      "name": "_apply_crop",
      "full_name": "SmartCropper._apply_crop",
      "lineno": 324,
      "end_lineno": 329,
      "loc": 6,
      "complexity": 1,
      "args": [
        "self",
        "frame",
        "crop_box"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartCropper",
      "docstring": "Apply crop to frame",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SmartCropper._calculate_output_dimensions": {
      "module": "src/providers/smart_crop.py",
      "name": "_calculate_output_dimensions",
      "full_name": "SmartCropper._calculate_output_dimensions",
      "lineno": 331,
      "end_lineno": 357,
      "loc": 27,
      "complexity": 6,
      "args": [
        "self",
        "frame_width",
        "frame_height"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartCropper",
      "docstring": "Calculate output dimensions based on aspect ratio",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SmartCropper._initialize_crop_box": {
      "module": "src/providers/smart_crop.py",
      "name": "_initialize_crop_box",
      "full_name": "SmartCropper._initialize_crop_box",
      "lineno": 359,
      "end_lineno": 365,
      "loc": 7,
      "complexity": 1,
      "args": [
        "self",
        "frame_width",
        "frame_height",
        "output_width",
        "output_height"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartCropper",
      "docstring": "Initialize crop box at center of frame",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:SmartCropper._get_recent_faces": {
      "module": "src/providers/smart_crop.py",
      "name": "_get_recent_faces",
      "full_name": "SmartCropper._get_recent_faces",
      "lineno": 367,
      "end_lineno": 372,
      "loc": 6,
      "complexity": 3,
      "args": [
        "self",
        "lookback_frames"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartCropper",
      "docstring": "Get faces from recent history",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:LetterboxCropper.__init__": {
      "module": "src/providers/smart_crop.py",
      "name": "__init__",
      "full_name": "LetterboxCropper.__init__",
      "lineno": 378,
      "end_lineno": 379,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "output_aspect_ratio"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "LetterboxCropper",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:LetterboxCropper.create_letterbox_frame": {
      "module": "src/providers/smart_crop.py",
      "name": "create_letterbox_frame",
      "full_name": "LetterboxCropper.create_letterbox_frame",
      "lineno": 381,
      "end_lineno": 406,
      "loc": 26,
      "complexity": 1,
      "args": [
        "self",
        "frame",
        "output_width",
        "output_height"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "LetterboxCropper",
      "docstring": "Create letterboxed frame with blurred background",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:apply_smart_crop": {
      "module": "src/providers/smart_crop.py",
      "name": "apply_smart_crop",
      "full_name": "apply_smart_crop",
      "lineno": 411,
      "end_lineno": 432,
      "loc": 22,
      "complexity": 2,
      "args": [
        "input_video",
        "output_video",
        "aspect_ratio"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Apply smart cropping to video.\n\nArgs:\n    input_video: Path to input video\n    output_video: Path to output video\n    aspect_ratio: Target aspect ratio (e.g., \"9:16\", \"1:1\", \"4:5\")\n    \nReturns:\n    Crop statistics and metadata",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_crop.py:generate_crop_filter": {
      "module": "src/providers/smart_crop.py",
      "name": "generate_crop_filter",
      "full_name": "generate_crop_filter",
      "lineno": 435,
      "end_lineno": 467,
      "loc": 33,
      "complexity": 4,
      "args": [
        "crop_metadata",
        "fps"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Generate FFmpeg crop filter from metadata.\n\nThis can be used to apply the same crop using FFmpeg instead of OpenCV.",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack.__init__": {
      "module": "src/providers/smart_track.py",
      "name": "__init__",
      "full_name": "SmartTrack.__init__",
      "lineno": 41,
      "end_lineno": 54,
      "loc": 14,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack._init_detectors": {
      "module": "src/providers/smart_track.py",
      "name": "_init_detectors",
      "full_name": "SmartTrack._init_detectors",
      "lineno": 56,
      "end_lineno": 70,
      "loc": 15,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Initialize ML detectors",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack.process": {
      "module": "src/providers/smart_track.py",
      "name": "process",
      "full_name": "SmartTrack.process",
      "lineno": 72,
      "end_lineno": 121,
      "loc": 50,
      "complexity": 3,
      "args": [
        "self",
        "video_path",
        "probe_result"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Main smart track processing",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack.extract_quick_highlights": {
      "module": "src/providers/smart_track.py",
      "name": "extract_quick_highlights",
      "full_name": "SmartTrack.extract_quick_highlights",
      "lineno": 123,
      "end_lineno": 151,
      "loc": 29,
      "complexity": 2,
      "args": [
        "self",
        "video_path",
        "probe_result"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Ultra-fast highlight extraction for FAST mode",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack.process_sections": {
      "module": "src/providers/smart_track.py",
      "name": "process_sections",
      "full_name": "SmartTrack.process_sections",
      "lineno": 153,
      "end_lineno": 181,
      "loc": 29,
      "complexity": 9,
      "args": [
        "self",
        "video_path",
        "probe_result",
        "exclude_ranges"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Process only non-excluded sections",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack._analyze_motion": {
      "module": "src/providers/smart_track.py",
      "name": "_analyze_motion",
      "full_name": "SmartTrack._analyze_motion",
      "lineno": 183,
      "end_lineno": 250,
      "loc": 68,
      "complexity": 14,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Detect high-motion segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack._analyze_faces": {
      "module": "src/providers/smart_track.py",
      "name": "_analyze_faces",
      "full_name": "SmartTrack._analyze_faces",
      "lineno": 252,
      "end_lineno": 318,
      "loc": 67,
      "complexity": 9,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Detect segments with faces",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack._analyze_audio_energy": {
      "module": "src/providers/smart_track.py",
      "name": "_analyze_audio_energy",
      "full_name": "SmartTrack._analyze_audio_energy",
      "lineno": 320,
      "end_lineno": 386,
      "loc": 67,
      "complexity": 12,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Detect audio peaks and interesting moments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack._detect_scene_changes": {
      "module": "src/providers/smart_track.py",
      "name": "_detect_scene_changes",
      "full_name": "SmartTrack._detect_scene_changes",
      "lineno": 388,
      "end_lineno": 448,
      "loc": 61,
      "complexity": 9,
      "args": [
        "self",
        "video_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Detect scene changes using histogram differences",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack._group_face_detections": {
      "module": "src/providers/smart_track.py",
      "name": "_group_face_detections",
      "full_name": "SmartTrack._group_face_detections",
      "lineno": 450,
      "end_lineno": 494,
      "loc": 45,
      "complexity": 6,
      "args": [
        "self",
        "detections"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Group face detections into continuous segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack._combine_analyses": {
      "module": "src/providers/smart_track.py",
      "name": "_combine_analyses",
      "full_name": "SmartTrack._combine_analyses",
      "lineno": 496,
      "end_lineno": 529,
      "loc": 34,
      "complexity": 6,
      "args": [
        "self",
        "results"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Combine segments from different analyses",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack._score_segments": {
      "module": "src/providers/smart_track.py",
      "name": "_score_segments",
      "full_name": "SmartTrack._score_segments",
      "lineno": 531,
      "end_lineno": 567,
      "loc": 37,
      "complexity": 6,
      "args": [
        "self",
        "segments",
        "probe_result"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Score segments based on multiple factors",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack._select_best_segments": {
      "module": "src/providers/smart_track.py",
      "name": "_select_best_segments",
      "full_name": "SmartTrack._select_best_segments",
      "lineno": 569,
      "end_lineno": 601,
      "loc": 33,
      "complexity": 8,
      "args": [
        "self",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Select best non-overlapping segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:SmartTrack._add_crop_params": {
      "module": "src/providers/smart_track.py",
      "name": "_add_crop_params",
      "full_name": "SmartTrack._add_crop_params",
      "lineno": 603,
      "end_lineno": 629,
      "loc": 27,
      "complexity": 7,
      "args": [
        "self",
        "video_path",
        "segments"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "SmartTrack",
      "docstring": "Add smart crop parameters for segments with faces",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/providers/smart_track.py:main": {
      "module": "src/providers/smart_track.py",
      "name": "main",
      "full_name": "main",
      "lineno": 632,
      "end_lineno": 655,
      "loc": 24,
      "complexity": 4,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Test smart track processing",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": true,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:BudgetManager.__new__": {
      "module": "src/utils/budget_guard.py",
      "name": "__new__",
      "full_name": "BudgetManager.__new__",
      "lineno": 28,
      "end_lineno": 34,
      "loc": 7,
      "complexity": 3,
      "args": [
        "cls"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetManager",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:BudgetManager.__init__": {
      "module": "src/utils/budget_guard.py",
      "name": "__init__",
      "full_name": "BudgetManager.__init__",
      "lineno": 36,
      "end_lineno": 46,
      "loc": 11,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetManager",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:BudgetManager.track_cost": {
      "module": "src/utils/budget_guard.py",
      "name": "track_cost",
      "full_name": "BudgetManager.track_cost",
      "lineno": 48,
      "end_lineno": 76,
      "loc": 29,
      "complexity": 2,
      "args": [
        "self",
        "job_id",
        "api_name",
        "cost_usd"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetManager",
      "docstring": "Track API cost for a job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:BudgetManager.check_budget": {
      "module": "src/utils/budget_guard.py",
      "name": "check_budget",
      "full_name": "BudgetManager.check_budget",
      "lineno": 78,
      "end_lineno": 102,
      "loc": 25,
      "complexity": 3,
      "args": [
        "self",
        "job_id",
        "additional_cost"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetManager",
      "docstring": "Check if job is within budget.\n\nReturns:\n    (is_within_budget, current_total_cost)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:BudgetManager.get_job_cost_breakdown": {
      "module": "src/utils/budget_guard.py",
      "name": "get_job_cost_breakdown",
      "full_name": "BudgetManager.get_job_cost_breakdown",
      "lineno": 104,
      "end_lineno": 120,
      "loc": 17,
      "complexity": 2,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetManager",
      "docstring": "Get detailed cost breakdown for a job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:BudgetManager.get_hourly_cost_rate": {
      "module": "src/utils/budget_guard.py",
      "name": "get_hourly_cost_rate",
      "full_name": "BudgetManager.get_hourly_cost_rate",
      "lineno": 122,
      "end_lineno": 135,
      "loc": 14,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetManager",
      "docstring": "Get current cost rate per hour",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:BudgetManager.reset_job_cost_cache": {
      "module": "src/utils/budget_guard.py",
      "name": "reset_job_cost_cache",
      "full_name": "BudgetManager.reset_job_cost_cache",
      "lineno": 137,
      "end_lineno": 141,
      "loc": 5,
      "complexity": 2,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetManager",
      "docstring": "Reset cached cost for a job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:priced": {
      "module": "src/utils/budget_guard.py",
      "name": "priced",
      "full_name": "priced",
      "lineno": 148,
      "end_lineno": 237,
      "loc": 90,
      "complexity": 1,
      "args": [
        "api_name",
        "cost_calculator"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Decorator that tracks API costs and enforces budget limits.\n\nArgs:\n    api_name: Name of the API being called\n    cost_calculator: Function that calculates cost from the result\n    \nExample:\n    @priced('openai', lambda result: 0.02 * len(result['tokens']) / 1000)\n    def call_gpt(prompt):\n        return openai.complete(prompt)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:estimate_cost": {
      "module": "src/utils/budget_guard.py",
      "name": "estimate_cost",
      "full_name": "estimate_cost",
      "lineno": 242,
      "end_lineno": 256,
      "loc": 15,
      "complexity": 4,
      "args": [
        "api_name"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Estimate cost for an API call before making it",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:check_budget_before_call": {
      "module": "src/utils/budget_guard.py",
      "name": "check_budget_before_call",
      "full_name": "check_budget_before_call",
      "lineno": 259,
      "end_lineno": 274,
      "loc": 16,
      "complexity": 2,
      "args": [
        "job_id",
        "api_name"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Pre-flight budget check before making an API call.\n\nRaises:\n    BudgetExceededError: If estimated cost would exceed budget",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:openai_completion_cost": {
      "module": "src/utils/budget_guard.py",
      "name": "openai_completion_cost",
      "full_name": "openai_completion_cost",
      "lineno": 279,
      "end_lineno": 287,
      "loc": 9,
      "complexity": 1,
      "args": [
        "response"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Calculate cost for OpenAI completion API",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:whisper_transcription_cost": {
      "module": "src/utils/budget_guard.py",
      "name": "whisper_transcription_cost",
      "full_name": "whisper_transcription_cost",
      "lineno": 290,
      "end_lineno": 297,
      "loc": 8,
      "complexity": 1,
      "args": [
        "response"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Calculate cost for Whisper transcription",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:gpt4_completion_cost": {
      "module": "src/utils/budget_guard.py",
      "name": "gpt4_completion_cost",
      "full_name": "gpt4_completion_cost",
      "lineno": 300,
      "end_lineno": 313,
      "loc": 14,
      "complexity": 1,
      "args": [
        "response"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Calculate cost for GPT-4 API",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:with_budget_tracking": {
      "module": "src/utils/budget_guard.py",
      "name": "with_budget_tracking",
      "full_name": "with_budget_tracking",
      "lineno": 318,
      "end_lineno": 342,
      "loc": 25,
      "complexity": 1,
      "args": [
        "job_id"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Context manager for budget tracking within a job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_guard.py:call_gpt": {
      "module": "src/utils/budget_guard.py",
      "name": "call_gpt",
      "full_name": "call_gpt",
      "lineno": 351,
      "end_lineno": 356,
      "loc": 6,
      "complexity": 1,
      "args": [
        "prompt",
        "job_id"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/video_validator.py:VideoValidator.__init__": {
      "module": "src/utils/video_validator.py",
      "name": "__init__",
      "full_name": "VideoValidator.__init__",
      "lineno": 53,
      "end_lineno": 55,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoValidator",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/video_validator.py:VideoValidator.validate_file": {
      "module": "src/utils/video_validator.py",
      "name": "validate_file",
      "full_name": "VideoValidator.validate_file",
      "lineno": 57,
      "end_lineno": 97,
      "loc": 41,
      "complexity": 8,
      "args": [
        "self",
        "file_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoValidator",
      "docstring": "Validate video file and extract metadata\n\nReturns:\n    (is_valid, metadata, error_message)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/video_validator.py:VideoValidator._run_ffprobe": {
      "module": "src/utils/video_validator.py",
      "name": "_run_ffprobe",
      "full_name": "VideoValidator._run_ffprobe",
      "lineno": 99,
      "end_lineno": 150,
      "loc": 52,
      "complexity": 12,
      "args": [
        "self",
        "file_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoValidator",
      "docstring": "Run ffprobe and return parsed JSON output",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/video_validator.py:VideoValidator._parse_probe_data": {
      "module": "src/utils/video_validator.py",
      "name": "_parse_probe_data",
      "full_name": "VideoValidator._parse_probe_data",
      "lineno": 152,
      "end_lineno": 214,
      "loc": 63,
      "complexity": 12,
      "args": [
        "self",
        "probe_data",
        "file_size"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoValidator",
      "docstring": "Parse ffprobe output into VideoMetadata",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/video_validator.py:VideoValidator._validate_metadata": {
      "module": "src/utils/video_validator.py",
      "name": "_validate_metadata",
      "full_name": "VideoValidator._validate_metadata",
      "lineno": 216,
      "end_lineno": 257,
      "loc": 42,
      "complexity": 14,
      "args": [
        "self",
        "metadata"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoValidator",
      "docstring": "Validate metadata and return list of errors",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/video_validator.py:VideoValidator.calculate_file_hash": {
      "module": "src/utils/video_validator.py",
      "name": "calculate_file_hash",
      "full_name": "VideoValidator.calculate_file_hash",
      "lineno": 259,
      "end_lineno": 271,
      "loc": 13,
      "complexity": 3,
      "args": [
        "self",
        "file_path",
        "chunk_size"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoValidator",
      "docstring": "Calculate SHA256 hash of file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/video_validator.py:VideoValidator.validate_and_store": {
      "module": "src/utils/video_validator.py",
      "name": "validate_and_store",
      "full_name": "VideoValidator.validate_and_store",
      "lineno": 273,
      "end_lineno": 320,
      "loc": 48,
      "complexity": 3,
      "args": [
        "self",
        "job_id",
        "file_path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "VideoValidator",
      "docstring": "Validate video and store metadata in database",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/video_validator.py:perform_preflight_check": {
      "module": "src/utils/video_validator.py",
      "name": "perform_preflight_check",
      "full_name": "perform_preflight_check",
      "lineno": 324,
      "end_lineno": 345,
      "loc": 22,
      "complexity": 2,
      "args": [
        "job_id",
        "input_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Perform pre-flight check for SmartVideoEditor integration",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/retry_utils.py:retry_with_backoff": {
      "module": "src/utils/retry_utils.py",
      "name": "retry_with_backoff",
      "full_name": "retry_with_backoff",
      "lineno": 12,
      "end_lineno": 68,
      "loc": 57,
      "complexity": 1,
      "args": [
        "exceptions",
        "max_retries",
        "initial_delay",
        "backoff_factor",
        "max_delay",
        "jitter"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Decorator for retrying functions with exponential backoff\n\nArgs:\n    exceptions: Tuple of exception types to retry on\n    max_retries: Maximum number of retry attempts\n    initial_delay: Initial delay in seconds\n    backoff_factor: Multiplier for delay after each retry\n    max_delay: Maximum delay between retries\n    jitter: Add random jitter to delays to prevent thundering herd",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/retry_utils.py:retry_on_error": {
      "module": "src/utils/retry_utils.py",
      "name": "retry_on_error",
      "full_name": "retry_on_error",
      "lineno": 71,
      "end_lineno": 93,
      "loc": 23,
      "complexity": 1,
      "args": [
        "max_retries",
        "delay",
        "exceptions"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Simple retry decorator with fixed delay",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/retry_utils.py:RetryableOperation.__init__": {
      "module": "src/utils/retry_utils.py",
      "name": "__init__",
      "full_name": "RetryableOperation.__init__",
      "lineno": 99,
      "end_lineno": 111,
      "loc": 13,
      "complexity": 1,
      "args": [
        "self",
        "operation",
        "max_retries",
        "initial_delay",
        "backoff_factor",
        "exceptions"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "RetryableOperation",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/retry_utils.py:RetryableOperation.execute": {
      "module": "src/utils/retry_utils.py",
      "name": "execute",
      "full_name": "RetryableOperation.execute",
      "lineno": 113,
      "end_lineno": 132,
      "loc": 20,
      "complexity": 4,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "RetryableOperation",
      "docstring": "Execute the operation with retry logic",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/retry_utils.py:call_openai_api": {
      "module": "src/utils/retry_utils.py",
      "name": "call_openai_api",
      "full_name": "call_openai_api",
      "lineno": 190,
      "end_lineno": 201,
      "loc": 12,
      "complexity": 1,
      "args": [
        "prompt",
        "api_key"
      ],
      "decorators": [
        "api_retry"
      ],
      "is_method": false,
      "class_name": null,
      "docstring": "Call OpenAI API with automatic retry",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/retry_utils.py:execute_db_query": {
      "module": "src/utils/retry_utils.py",
      "name": "execute_db_query",
      "full_name": "execute_db_query",
      "lineno": 205,
      "end_lineno": 211,
      "loc": 7,
      "complexity": 1,
      "args": [
        "query",
        "params"
      ],
      "decorators": [
        "db_retry"
      ],
      "is_method": false,
      "class_name": null,
      "docstring": "Execute database query with automatic retry",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/retry_utils.py:safe_file_write": {
      "module": "src/utils/retry_utils.py",
      "name": "safe_file_write",
      "full_name": "safe_file_write",
      "lineno": 215,
      "end_lineno": 231,
      "loc": 17,
      "complexity": 3,
      "args": [
        "path",
        "content"
      ],
      "decorators": [
        "file_retry"
      ],
      "is_method": false,
      "class_name": null,
      "docstring": "Write file with automatic retry on failure",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/retry_utils.py:run_ffmpeg_command": {
      "module": "src/utils/retry_utils.py",
      "name": "run_ffmpeg_command",
      "full_name": "run_ffmpeg_command",
      "lineno": 235,
      "end_lineno": 246,
      "loc": 12,
      "complexity": 1,
      "args": [
        "cmd"
      ],
      "decorators": [
        "ffmpeg_retry"
      ],
      "is_method": false,
      "class_name": null,
      "docstring": "Run FFmpeg command with automatic retry",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:AlertHandler.__init__": {
      "module": "src/utils/monitoring_integration.py",
      "name": "__init__",
      "full_name": "AlertHandler.__init__",
      "lineno": 22,
      "end_lineno": 26,
      "loc": 5,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AlertHandler",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:AlertHandler._setup_routes": {
      "module": "src/utils/monitoring_integration.py",
      "name": "_setup_routes",
      "full_name": "AlertHandler._setup_routes",
      "lineno": 28,
      "end_lineno": 91,
      "loc": 64,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AlertHandler",
      "docstring": "Setup webhook routes for alerts",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:AlertHandler._process_alert": {
      "module": "src/utils/monitoring_integration.py",
      "name": "_process_alert",
      "full_name": "AlertHandler._process_alert",
      "lineno": 93,
      "end_lineno": 110,
      "loc": 18,
      "complexity": 1,
      "args": [
        "self",
        "alert"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AlertHandler",
      "docstring": "Process individual alert",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:AlertHandler._handle_ffmpeg_crashes": {
      "module": "src/utils/monitoring_integration.py",
      "name": "_handle_ffmpeg_crashes",
      "full_name": "AlertHandler._handle_ffmpeg_crashes",
      "lineno": 112,
      "end_lineno": 127,
      "loc": 16,
      "complexity": 2,
      "args": [
        "self",
        "alert"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AlertHandler",
      "docstring": "Handle FFmpeg crash alerts",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:AlertHandler._handle_db_exhaustion": {
      "module": "src/utils/monitoring_integration.py",
      "name": "_handle_db_exhaustion",
      "full_name": "AlertHandler._handle_db_exhaustion",
      "lineno": 129,
      "end_lineno": 134,
      "loc": 6,
      "complexity": 1,
      "args": [
        "self",
        "alert"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AlertHandler",
      "docstring": "Handle database connection pool exhaustion",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:AlertHandler._handle_high_error_rate": {
      "module": "src/utils/monitoring_integration.py",
      "name": "_handle_high_error_rate",
      "full_name": "AlertHandler._handle_high_error_rate",
      "lineno": 138,
      "end_lineno": 147,
      "loc": 10,
      "complexity": 2,
      "args": [
        "self",
        "alert"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AlertHandler",
      "docstring": "Handle high error rate alerts",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:AlertHandler._handle_budget_exceeded": {
      "module": "src/utils/monitoring_integration.py",
      "name": "_handle_budget_exceeded",
      "full_name": "AlertHandler._handle_budget_exceeded",
      "lineno": 149,
      "end_lineno": 162,
      "loc": 14,
      "complexity": 1,
      "args": [
        "self",
        "job_id"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AlertHandler",
      "docstring": "Handle budget exceeded for a job",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:AlertHandler.start": {
      "module": "src/utils/monitoring_integration.py",
      "name": "start",
      "full_name": "AlertHandler.start",
      "lineno": 164,
      "end_lineno": 166,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "port"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "AlertHandler",
      "docstring": "Start the alert handler server",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:MonitoringServer.__init__": {
      "module": "src/utils/monitoring_integration.py",
      "name": "__init__",
      "full_name": "MonitoringServer.__init__",
      "lineno": 172,
      "end_lineno": 175,
      "loc": 4,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MonitoringServer",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:MonitoringServer.start": {
      "module": "src/utils/monitoring_integration.py",
      "name": "start",
      "full_name": "MonitoringServer.start",
      "lineno": 177,
      "end_lineno": 190,
      "loc": 14,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "MonitoringServer",
      "docstring": "Start both metrics and alert servers",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:CircuitBreaker.__init__": {
      "module": "src/utils/monitoring_integration.py",
      "name": "__init__",
      "full_name": "CircuitBreaker.__init__",
      "lineno": 197,
      "end_lineno": 198,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "redis_client"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CircuitBreaker",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:CircuitBreaker.is_open": {
      "module": "src/utils/monitoring_integration.py",
      "name": "is_open",
      "full_name": "CircuitBreaker.is_open",
      "lineno": 200,
      "end_lineno": 202,
      "loc": 3,
      "complexity": 1,
      "args": [
        "self",
        "service"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CircuitBreaker",
      "docstring": "Check if circuit breaker is open for a service",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:CircuitBreaker.can_proceed": {
      "module": "src/utils/monitoring_integration.py",
      "name": "can_proceed",
      "full_name": "CircuitBreaker.can_proceed",
      "lineno": 204,
      "end_lineno": 209,
      "loc": 6,
      "complexity": 2,
      "args": [
        "self",
        "service"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CircuitBreaker",
      "docstring": "Check if we can proceed with the service call",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:RateLimiter.__init__": {
      "module": "src/utils/monitoring_integration.py",
      "name": "__init__",
      "full_name": "RateLimiter.__init__",
      "lineno": 216,
      "end_lineno": 217,
      "loc": 2,
      "complexity": 1,
      "args": [
        "self",
        "redis_client"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "RateLimiter",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:RateLimiter.check_rate_limit": {
      "module": "src/utils/monitoring_integration.py",
      "name": "check_rate_limit",
      "full_name": "RateLimiter.check_rate_limit",
      "lineno": 219,
      "end_lineno": 236,
      "loc": 18,
      "complexity": 3,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "RateLimiter",
      "docstring": "Check if we're within rate limits",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:process_video_with_monitoring": {
      "module": "src/utils/monitoring_integration.py",
      "name": "process_video_with_monitoring",
      "full_name": "process_video_with_monitoring",
      "lineno": 240,
      "end_lineno": 265,
      "loc": 26,
      "complexity": 5,
      "args": [
        "job_id",
        "video_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Example of processing video with monitoring integration",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/monitoring_integration.py:send_test_alert": {
      "module": "src/utils/monitoring_integration.py",
      "name": "send_test_alert",
      "full_name": "send_test_alert",
      "lineno": 269,
      "end_lineno": 312,
      "loc": 44,
      "complexity": 2,
      "args": [
        "alert_type"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Send test alert to webhook",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "http"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_decorator.py:BudgetTracker.add_cost": {
      "module": "src/utils/budget_decorator.py",
      "name": "add_cost",
      "full_name": "BudgetTracker.add_cost",
      "lineno": 29,
      "end_lineno": 46,
      "loc": 18,
      "complexity": 2,
      "args": [
        "self",
        "amount",
        "api_name",
        "operation"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetTracker",
      "docstring": "Add cost to budget tracker",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_decorator.py:BudgetTracker.get_remaining_budget": {
      "module": "src/utils/budget_decorator.py",
      "name": "get_remaining_budget",
      "full_name": "BudgetTracker.get_remaining_budget",
      "lineno": 48,
      "end_lineno": 51,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetTracker",
      "docstring": "Get remaining budget",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_decorator.py:BudgetTracker.get_usage_report": {
      "module": "src/utils/budget_decorator.py",
      "name": "get_usage_report",
      "full_name": "BudgetTracker.get_usage_report",
      "lineno": 53,
      "end_lineno": 62,
      "loc": 10,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "BudgetTracker",
      "docstring": "Get budget usage report",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_decorator.py:priced": {
      "module": "src/utils/budget_decorator.py",
      "name": "priced",
      "full_name": "priced",
      "lineno": 69,
      "end_lineno": 125,
      "loc": 57,
      "complexity": 1,
      "args": [
        "api_name",
        "operation",
        "cost_calculator"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Decorator to track API costs and enforce budget limits\n\nArgs:\n    api_name: Name of the API (e.g., 'openai', 'anthropic', 'deepgram')\n    operation: Operation being performed (e.g., 'transcribe', 'analyze')\n    cost_calculator: Optional function to calculate cost from result",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_decorator.py:get_budget_status": {
      "module": "src/utils/budget_decorator.py",
      "name": "get_budget_status",
      "full_name": "get_budget_status",
      "lineno": 128,
      "end_lineno": 130,
      "loc": 3,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get current budget status",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_decorator.py:reset_budget": {
      "module": "src/utils/budget_decorator.py",
      "name": "reset_budget",
      "full_name": "reset_budget",
      "lineno": 133,
      "end_lineno": 136,
      "loc": 4,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Reset budget tracker (for testing)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_decorator.py:calculate_deepgram_cost": {
      "module": "src/utils/budget_decorator.py",
      "name": "calculate_deepgram_cost",
      "full_name": "calculate_deepgram_cost",
      "lineno": 140,
      "end_lineno": 149,
      "loc": 10,
      "complexity": 2,
      "args": [
        "result",
        "audio_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Calculate Deepgram cost based on audio duration",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_decorator.py:calculate_anthropic_cost": {
      "module": "src/utils/budget_decorator.py",
      "name": "calculate_anthropic_cost",
      "full_name": "calculate_anthropic_cost",
      "lineno": 152,
      "end_lineno": 162,
      "loc": 11,
      "complexity": 3,
      "args": [
        "result"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Calculate Anthropic cost based on usage",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/budget_decorator.py:calculate_openai_cost": {
      "module": "src/utils/budget_decorator.py",
      "name": "calculate_openai_cost",
      "full_name": "calculate_openai_cost",
      "lineno": 165,
      "end_lineno": 175,
      "loc": 11,
      "complexity": 3,
      "args": [
        "result"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Calculate OpenAI cost based on usage",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.__init__": {
      "module": "src/utils/cleanup_manager.py",
      "name": "__init__",
      "full_name": "CleanupManager.__init__",
      "lineno": 18,
      "end_lineno": 26,
      "loc": 9,
      "complexity": 1,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": null,
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager._register_handlers": {
      "module": "src/utils/cleanup_manager.py",
      "name": "_register_handlers",
      "full_name": "CleanupManager._register_handlers",
      "lineno": 28,
      "end_lineno": 36,
      "loc": 9,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Register cleanup handlers",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager._signal_handler": {
      "module": "src/utils/cleanup_manager.py",
      "name": "_signal_handler",
      "full_name": "CleanupManager._signal_handler",
      "lineno": 38,
      "end_lineno": 42,
      "loc": 5,
      "complexity": 2,
      "args": [
        "self",
        "signum",
        "frame"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Handle termination signals",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.register_fifo": {
      "module": "src/utils/cleanup_manager.py",
      "name": "register_fifo",
      "full_name": "CleanupManager.register_fifo",
      "lineno": 44,
      "end_lineno": 47,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self",
        "path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Register a FIFO for cleanup",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.register_temp_file": {
      "module": "src/utils/cleanup_manager.py",
      "name": "register_temp_file",
      "full_name": "CleanupManager.register_temp_file",
      "lineno": 49,
      "end_lineno": 52,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self",
        "path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Register a temporary file for cleanup",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.register_temp_dir": {
      "module": "src/utils/cleanup_manager.py",
      "name": "register_temp_dir",
      "full_name": "CleanupManager.register_temp_dir",
      "lineno": 54,
      "end_lineno": 57,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self",
        "path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Register a temporary directory for cleanup",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.register_process": {
      "module": "src/utils/cleanup_manager.py",
      "name": "register_process",
      "full_name": "CleanupManager.register_process",
      "lineno": 59,
      "end_lineno": 62,
      "loc": 4,
      "complexity": 1,
      "args": [
        "self",
        "pid"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Register a process for cleanup",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.cleanup_fifo": {
      "module": "src/utils/cleanup_manager.py",
      "name": "cleanup_fifo",
      "full_name": "CleanupManager.cleanup_fifo",
      "lineno": 64,
      "end_lineno": 72,
      "loc": 9,
      "complexity": 3,
      "args": [
        "self",
        "path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Clean up a FIFO",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.cleanup_temp_file": {
      "module": "src/utils/cleanup_manager.py",
      "name": "cleanup_temp_file",
      "full_name": "CleanupManager.cleanup_temp_file",
      "lineno": 74,
      "end_lineno": 82,
      "loc": 9,
      "complexity": 3,
      "args": [
        "self",
        "path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Clean up a temporary file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.cleanup_temp_dir": {
      "module": "src/utils/cleanup_manager.py",
      "name": "cleanup_temp_dir",
      "full_name": "CleanupManager.cleanup_temp_dir",
      "lineno": 84,
      "end_lineno": 98,
      "loc": 15,
      "complexity": 6,
      "args": [
        "self",
        "path"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Clean up a temporary directory",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.cleanup_process": {
      "module": "src/utils/cleanup_manager.py",
      "name": "cleanup_process",
      "full_name": "CleanupManager.cleanup_process",
      "lineno": 100,
      "end_lineno": 123,
      "loc": 24,
      "complexity": 7,
      "args": [
        "self",
        "pid"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Clean up a process",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.cleanup_all": {
      "module": "src/utils/cleanup_manager.py",
      "name": "cleanup_all",
      "full_name": "CleanupManager.cleanup_all",
      "lineno": 125,
      "end_lineno": 150,
      "loc": 26,
      "complexity": 6,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Clean up all registered resources",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.managed_resource": {
      "module": "src/utils/cleanup_manager.py",
      "name": "managed_resource",
      "full_name": "CleanupManager.managed_resource",
      "lineno": 153,
      "end_lineno": 175,
      "loc": 23,
      "complexity": 9,
      "args": [
        "self",
        "resource_type",
        "resource_id"
      ],
      "decorators": [
        "contextmanager"
      ],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Context manager for automatic resource cleanup",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.managed_ffmpeg_process": {
      "module": "src/utils/cleanup_manager.py",
      "name": "managed_ffmpeg_process",
      "full_name": "CleanupManager.managed_ffmpeg_process",
      "lineno": 178,
      "end_lineno": 195,
      "loc": 18,
      "complexity": 4,
      "args": [
        "self",
        "cmd"
      ],
      "decorators": [
        "contextmanager"
      ],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Context manager for FFmpeg processes with automatic cleanup",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": true,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/cleanup_manager.py:CleanupManager.unregister_all": {
      "module": "src/utils/cleanup_manager.py",
      "name": "unregister_all",
      "full_name": "CleanupManager.unregister_all",
      "lineno": 197,
      "end_lineno": 200,
      "loc": 4,
      "complexity": 2,
      "args": [
        "self"
      ],
      "decorators": [],
      "is_method": true,
      "class_name": "CleanupManager",
      "docstring": "Unregister all resources without cleanup (for testing)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/ffmpeg_utils.py:make_concat_file": {
      "module": "src/utils/ffmpeg_utils.py",
      "name": "make_concat_file",
      "full_name": "make_concat_file",
      "lineno": 12,
      "end_lineno": 29,
      "loc": 18,
      "complexity": 2,
      "args": [
        "video_clips",
        "source_video"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Create FFmpeg concat file for multiple video segments",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/ffmpeg_utils.py:extract_video_segment": {
      "module": "src/utils/ffmpeg_utils.py",
      "name": "extract_video_segment",
      "full_name": "extract_video_segment",
      "lineno": 32,
      "end_lineno": 51,
      "loc": 20,
      "complexity": 2,
      "args": [
        "source_video",
        "start_ms",
        "end_ms",
        "output_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Extract a specific segment from video",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/ffmpeg_utils.py:concatenate_video_segments": {
      "module": "src/utils/ffmpeg_utils.py",
      "name": "concatenate_video_segments",
      "full_name": "concatenate_video_segments",
      "lineno": 54,
      "end_lineno": 153,
      "loc": 100,
      "complexity": 11,
      "args": [
        "video_clips",
        "source_video",
        "output_path",
        "vertical_format"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Concatenate multiple video segments into one video",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess",
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/ffmpeg_utils.py:create_subtitle_file": {
      "module": "src/utils/ffmpeg_utils.py",
      "name": "create_subtitle_file",
      "full_name": "create_subtitle_file",
      "lineno": 156,
      "end_lineno": 224,
      "loc": 69,
      "complexity": 12,
      "args": [
        "words",
        "start_ms",
        "end_ms",
        "output_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Create SRT subtitle file for a video segment",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/ffmpeg_utils.py:format_srt_time": {
      "module": "src/utils/ffmpeg_utils.py",
      "name": "format_srt_time",
      "full_name": "format_srt_time",
      "lineno": 227,
      "end_lineno": 234,
      "loc": 8,
      "complexity": 1,
      "args": [
        "seconds"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Format seconds to SRT time format (HH:MM:SS,mmm)",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/ffmpeg_utils.py:burn_captions": {
      "module": "src/utils/ffmpeg_utils.py",
      "name": "burn_captions",
      "full_name": "burn_captions",
      "lineno": 237,
      "end_lineno": 262,
      "loc": 26,
      "complexity": 3,
      "args": [
        "video_path",
        "srt_path",
        "output_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Burn subtitles into video",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/ffmpeg_utils.py:apply_smart_crop": {
      "module": "src/utils/ffmpeg_utils.py",
      "name": "apply_smart_crop",
      "full_name": "apply_smart_crop",
      "lineno": 265,
      "end_lineno": 313,
      "loc": 49,
      "complexity": 8,
      "args": [
        "video_path",
        "output_path",
        "crop_zone"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Apply smart crop to video",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/ffmpeg_utils.py:get_video_info": {
      "module": "src/utils/ffmpeg_utils.py",
      "name": "get_video_info",
      "full_name": "get_video_info",
      "lineno": 316,
      "end_lineno": 358,
      "loc": 43,
      "complexity": 8,
      "args": [
        "video_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get video metadata",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/secret_loader.py:_get_aws_secret": {
      "module": "src/utils/secret_loader.py",
      "name": "_get_aws_secret",
      "full_name": "_get_aws_secret",
      "lineno": 28,
      "end_lineno": 61,
      "loc": 34,
      "complexity": 6,
      "args": [
        "secret_name"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Retrieve secret from AWS Secrets Manager",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/secret_loader.py:get": {
      "module": "src/utils/secret_loader.py",
      "name": "get",
      "full_name": "get",
      "lineno": 65,
      "end_lineno": 106,
      "loc": 42,
      "complexity": 5,
      "args": [
        "name",
        "default"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get secret value by name\n\nPriority:\n1. Cached value\n2. AWS Secrets Manager\n3. Environment variable\n4. Default value\n\nArgs:\n    name: Secret name (e.g., 'OPENAI_API_KEY')\n    default: Default value if secret not found\n\nReturns:\n    Secret value or default",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/secret_loader.py:clear_cache": {
      "module": "src/utils/secret_loader.py",
      "name": "clear_cache",
      "full_name": "clear_cache",
      "lineno": 109,
      "end_lineno": 112,
      "loc": 4,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Clear the secret cache",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/secret_loader.py:get_openai_key": {
      "module": "src/utils/secret_loader.py",
      "name": "get_openai_key",
      "full_name": "get_openai_key",
      "lineno": 116,
      "end_lineno": 118,
      "loc": 3,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get OpenAI API key",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/secret_loader.py:get_anthropic_key": {
      "module": "src/utils/secret_loader.py",
      "name": "get_anthropic_key",
      "full_name": "get_anthropic_key",
      "lineno": 121,
      "end_lineno": 123,
      "loc": 3,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get Anthropic API key",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/secret_loader.py:get_deepgram_key": {
      "module": "src/utils/secret_loader.py",
      "name": "get_deepgram_key",
      "full_name": "get_deepgram_key",
      "lineno": 126,
      "end_lineno": 128,
      "loc": 3,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get Deepgram API key",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/secret_loader.py:get_gemini_key": {
      "module": "src/utils/secret_loader.py",
      "name": "get_gemini_key",
      "full_name": "get_gemini_key",
      "lineno": 131,
      "end_lineno": 133,
      "loc": 3,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get Gemini API key",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "ai"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/secret_loader.py:get_database_url": {
      "module": "src/utils/secret_loader.py",
      "name": "get_database_url",
      "full_name": "get_database_url",
      "lineno": 136,
      "end_lineno": 140,
      "loc": 5,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get database URL with fallback",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/utils/secret_loader.py:get_redis_url": {
      "module": "src/utils/secret_loader.py",
      "name": "get_redis_url",
      "full_name": "get_redis_url",
      "lineno": 143,
      "end_lineno": 145,
      "loc": 3,
      "complexity": 1,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Get Redis URL with fallback",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "db"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/cli/run_pipeline.py:extract_audio_rms": {
      "module": "src/cli/run_pipeline.py",
      "name": "extract_audio_rms",
      "full_name": "extract_audio_rms",
      "lineno": 31,
      "end_lineno": 104,
      "loc": 74,
      "complexity": 12,
      "args": [
        "video_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Extract audio RMS energy levels from video file",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "subprocess"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/cli/run_pipeline.py:validate_video_file": {
      "module": "src/cli/run_pipeline.py",
      "name": "validate_video_file",
      "full_name": "validate_video_file",
      "lineno": 107,
      "end_lineno": 151,
      "loc": 45,
      "complexity": 12,
      "args": [
        "video_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Validate video file exists and is accessible, prevent path traversal",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/cli/run_pipeline.py:display_video_info": {
      "module": "src/cli/run_pipeline.py",
      "name": "display_video_info",
      "full_name": "display_video_info",
      "lineno": 154,
      "end_lineno": 174,
      "loc": 21,
      "complexity": 2,
      "args": [
        "video_path"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Display video file information",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/cli/run_pipeline.py:start_mcp_server": {
      "module": "src/cli/run_pipeline.py",
      "name": "start_mcp_server",
      "full_name": "start_mcp_server",
      "lineno": 177,
      "end_lineno": 205,
      "loc": 29,
      "complexity": 3,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Start MCP server in background thread",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": true,
      "external_deps": [
        "http"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/cli/run_pipeline.py:post_to_mcp": {
      "module": "src/cli/run_pipeline.py",
      "name": "post_to_mcp",
      "full_name": "post_to_mcp",
      "lineno": 208,
      "end_lineno": 226,
      "loc": 19,
      "complexity": 3,
      "args": [
        "endpoint",
        "data"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Post data to MCP server",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "http"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/cli/run_pipeline.py:create_subtitles_for_clips": {
      "module": "src/cli/run_pipeline.py",
      "name": "create_subtitles_for_clips",
      "full_name": "create_subtitles_for_clips",
      "lineno": 229,
      "end_lineno": 243,
      "loc": 15,
      "complexity": 3,
      "args": [
        "clips",
        "words"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Create subtitle files for each clip",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/cli/run_pipeline.py:process_video_pipeline": {
      "module": "src/cli/run_pipeline.py",
      "name": "process_video_pipeline",
      "full_name": "process_video_pipeline",
      "lineno": 246,
      "end_lineno": 360,
      "loc": 115,
      "complexity": 3,
      "args": [
        "video_path",
        "mode"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Main video processing pipeline",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": true,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/cli/run_pipeline.py:display_results": {
      "module": "src/cli/run_pipeline.py",
      "name": "display_results",
      "full_name": "display_results",
      "lineno": 363,
      "end_lineno": 429,
      "loc": 67,
      "complexity": 8,
      "args": [
        "results"
      ],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Display pipeline results",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": true,
      "catches_broad_exception": false,
      "external_deps": [
        "file"
      ],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": false,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    },
    "src/cli/run_pipeline.py:main": {
      "module": "src/cli/run_pipeline.py",
      "name": "main",
      "full_name": "main",
      "lineno": 432,
      "end_lineno": 472,
      "loc": 41,
      "complexity": 6,
      "args": [],
      "decorators": [],
      "is_method": false,
      "class_name": null,
      "docstring": "Main CLI function",
      "calls": "set()",
      "called_by": "set()",
      "has_type_hints": false,
      "catches_broad_exception": false,
      "external_deps": [],
      "is_async": false,
      "is_generator": false,
      "is_property": false,
      "is_test": false,
      "is_mock": false,
      "is_placeholder": false,
      "runtime_called": true,
      "coverage_percent": 0.0,
      "profile_percent": 0.0
    }
  }
}