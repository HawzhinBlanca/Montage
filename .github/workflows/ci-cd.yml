name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ai-video-pipeline

jobs:
  # Unit Tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_video_pipeline
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
    
    - name: Set up test environment
      run: |
        export DATABASE_URL=postgresql://postgres:postgres@localhost/test_video_pipeline
        export REDIS_URL=redis://localhost:6379/0
        export MAX_COST_USD=1.00
        export HF_HOME=/tmp/huggingface
        export TRANSFORMERS_CACHE=/tmp/huggingface
        python migrate.py
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost/test_video_pipeline
        REDIS_URL: redis://localhost:6379/0
        MAX_COST_USD: 1.00
        HF_HOME: /tmp/huggingface
        TRANSFORMERS_CACHE: /tmp/huggingface
    
    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html -n 4
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost/test_video_pipeline
        REDIS_URL: redis://localhost:6379/0
        OPENAI_API_KEY: test-key
        ANTHROPIC_API_KEY: test-key
        DEEPGRAM_API_KEY: test-key
        MAX_COST_USD: 1.00
        HF_HOME: /tmp/huggingface
        TRANSFORMERS_CACHE: /tmp/huggingface
    
    - name: Run acceptance tests
      run: |
        ./run_acceptance_tests.sh
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost/test_video_pipeline
        REDIS_URL: redis://localhost:6379/0
        MAX_COST_USD: 1.00
        HF_HOME: /tmp/huggingface
        TRANSFORMERS_CACHE: /tmp/huggingface
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          bandit-report.json

  # Build and Push Images
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}
          COMMIT_SHA=${{ github.sha }}
    
    - name: Build and push GPU image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.gpu
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}-gpu:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name video-pipeline-staging
    
    - name: Deploy to staging
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|video-pipeline:latest|${{ needs.build.outputs.image-tag }}|g" infrastructure/k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f infrastructure/k8s/namespace.yaml
        kubectl apply -f infrastructure/k8s/configmap.yaml
        kubectl apply -f infrastructure/k8s/deployment.yaml
        kubectl apply -f infrastructure/k8s/service.yaml
        kubectl apply -f infrastructure/k8s/ingress.yaml
        kubectl apply -f infrastructure/k8s/hpa.yaml
        
        # Wait for rollout
        kubectl rollout status deployment/video-pipeline-api -n video-pipeline --timeout=600s
        kubectl rollout status deployment/video-pipeline-worker -n video-pipeline --timeout=600s
    
    - name: Run health checks
      run: |
        # Wait for health checks to pass
        sleep 60
        
        # Check API health
        kubectl get pods -n video-pipeline
        kubectl logs -l app.kubernetes.io/component=api -n video-pipeline --tail=50
        
        # Test API endpoint
        STAGING_URL=$(kubectl get ingress video-pipeline-ingress -n video-pipeline -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        curl -f http://$STAGING_URL/health || exit 1

  # Deploy to Production
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name video-pipeline
    
    - name: Blue-Green Deployment
      run: |
        # Create green deployment
        sed -i "s|video-pipeline:latest|${{ needs.build.outputs.image-tag }}|g" infrastructure/k8s/deployment.yaml
        sed -i "s|video-pipeline-api|video-pipeline-api-green|g" infrastructure/k8s/deployment.yaml
        
        # Deploy green version
        kubectl apply -f infrastructure/k8s/deployment.yaml
        
        # Wait for green deployment
        kubectl rollout status deployment/video-pipeline-api-green -n video-pipeline --timeout=600s
        
        # Health check green deployment
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=video-pipeline,app.kubernetes.io/component=api -n video-pipeline --timeout=300s
        
        # Switch traffic to green (update service selector)
        kubectl patch service video-pipeline-api -n video-pipeline -p '{"spec":{"selector":{"app.kubernetes.io/name":"video-pipeline","app.kubernetes.io/component":"api","version":"green"}}}'
        
        # Verify switch worked
        sleep 30
        PROD_URL=$(kubectl get ingress video-pipeline-ingress -n video-pipeline -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        curl -f https://$PROD_URL/health || exit 1
        
        # Clean up old blue deployment
        kubectl delete deployment video-pipeline-api -n video-pipeline --ignore-not-found=true
        
        # Rename green to primary
        kubectl patch deployment video-pipeline-api-green -n video-pipeline -p '{"metadata":{"name":"video-pipeline-api"}}'

  # Performance Testing
  performance-test:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install k6
      run: |
        curl -s https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xvz
        sudo mv k6-v0.47.0-linux-amd64/k6 /usr/local/bin/
    
    - name: Run performance tests
      run: |
        # Run load test against staging
        k6 run tests/performance/load-test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  # Notify
  notify:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()